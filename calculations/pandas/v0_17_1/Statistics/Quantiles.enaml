# Atom
from atom.api import Atom, Bool, List, Str

# Enaml
from enaml.widgets.api import CheckBox, Form, GroupBox, Label, Notebook, ObjectCombo, Page
from custom_views.fields import Field

# Models
from calculations.core.ABCs import ABCDataFrameToDataFrameOrSeries

import re
from pandas import Series, DataFrame



class Quantiles_Model(ABCDataFrameToDataFrameOrSeries):


    calc_name = 'Quantiles'


    class ui(Atom):

        # axis
        axis = Str('index')
        axis_list = List(str, ['index', 'columns'])
        axis_tooltip = 'The axis over which the calculation should be applied.'
        # quantiles
        quantiles = Str('0.5')
        quantiles_tooltip = ('The quantiles to calculate.\n' +
                             'Enter either a single value or a list of ' +
                             'values, separated by commas. Values should be ' +
                             'between 0 and 1.')
        # numeric_only
        numeric_only = Bool(True)
        

    def setInputs(self, dataframe):

        self._dataframe = dataframe
        self.uiModel = Quantiles_Model.ui()


    def getOutputs(self):

        def getQuantiles(str_quantiles):
            try:
                quantiles = [float(q) for q in re.split('\s*,\s*', 
                                                        str_quantiles)]
                if len(quantiles) == 1:
                    quantiles = quantiles[0]
            except:
                quantiles = 0.5
            return quantiles

        try:

            # Assign local variables
            args = {
                'axis': self.uiModel.axis,
                'q': getQuantiles(self.uiModel.quantiles),
                'numeric_only': self.uiModel.numeric_only
                }
            
            quantiles = self._dataframe.quantile(** args)
            
            if type(quantiles) is DataFrame:
                
                quantiles.index.name = 'quantile'
                return {'dataframe': quantiles}
            
            else:
                
                quantiles.index.name = ('column'
                                        if self.uiModel.axis == 'index'
                                        else 'index')
                quantiles.name = 'quantile'
                return {'series': quantiles}

        except Exception as e:

            return self.standard_exception(e)



enamldef Quantiles_View(GroupBox):

    attr model

    Form:

        Label:
            text = 'Axis'
            tool_tip = model.axis_tooltip
        ObjectCombo:
            items = model.axis_list
            selected := model.axis
            tool_tip = model.axis_tooltip

        Label:
            text = 'Quantiles'
            tool_tip = model.quantiles_tooltip
        Field:
            text := model.quantiles
            tool_tip = model.quantiles_tooltip

        Label:
            text = 'Numeric Only'
        CheckBox:
            checked := model.numeric_only