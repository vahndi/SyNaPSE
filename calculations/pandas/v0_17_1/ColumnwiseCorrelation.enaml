# Atom
from atom.api import Atom, Int, List, Str


# Enaml
from enaml.core.api import Conditional
from enaml.widgets.api import Form, GroupBox, Label, Notebook, ObjectCombo, Page
from custom_views.fields import IntField

# Models
from calculations.core.ABCs import ABCDataFrameToDataFrame



class ColumnwiseCorrelation_UI(Atom):

    # method
    method = Str('pearson')
    method_list = List(str, ['pearson', 'kendall', 'spearman'])
    method_tooltip = ('pearson : standard correlation coefficient\n' +
                      'kendall : Kendall Tau correlation coefficient\n' +
                      'spearman : Spearman rank correlation')
    # min_periods
    min_periods = Int(1)
    min_periods_min = Int(1)
    min_periods_tooltip = ('Minimum number of observations required per' + 
                           'pair of columns to have a valid result.\n' + 
                           'Currently only available for pearson and ' + 
                           'spearman correlation.')



class ColumnwiseCorrelation_Model(ABCDataFrameToDataFrame):


    calc_name = 'Column-wise Correlation'


    def setInputs(self, dataframe):

        self._dataframe = dataframe
        self.uiModel = ColumnwiseCorrelation_UI()


    def getOutputs(self):

        # Assign local variables
        try:
            args = {'method': self.uiModel.method,
                    'min_periods': (self.uiModel.min_periods 
                                    if self.uiModel.method in ('pearson', 
                                                               'spearman') 
                                    else None)}
                                    
            return {'dataframe': self._dataframe.corr(**args)}
        
        except Exception as e:
            
            return self.standard_exception(e)



enamldef ColumnwiseCorrelation_View(GroupBox): me:

    attr model

    Form:

        Label:
            text = 'Method'
            tool_tip = model.method_tooltip
        ObjectCombo:
            items = model.method_list
            selected := model.method
            tool_tip = model.method_tooltip

        Conditional:
            condition << model.method in ('pearson', 'spearman')
            Label:
                text = 'Min Periods'
                tool_tip = mode.min_periods_tooltip
            IntField:
                value := model.min_periods
                minimum = model.min_periods_min
                tool_tip = mode.min_periods_tooltip
