# Atom
from atom.api import Atom, Int, List, Str


# Enaml
from enaml.widgets.api import Form, GroupBox, Label, Notebook, ObjectCombo, Page
from custom_views.fields import IntField

# Models
from calculations.core.ABCs import ABCDataFrameToDataFrame



class ElementwiseDifference_UI(Atom):

    # periods
    periods = Int(1)
    periods_max_axis0 = Int()
    periods_max_axis1 = Int()
    periods_tooltip = 'Periods to shift for forming difference.'
    # axis
    axis = Str('index')
    axis_list = List(str, ['index', 'columns'])
    axis_tooltip = 'Take difference over rows (index) or columns.'


class ElementwiseDifference_Model(ABCDataFrameToDataFrame):


    calc_name = 'Element-wise Difference'


    def setInputs(self, dataframe):

        self._dataframe = dataframe
        self._df_numeric = dataframe.select_dtypes(exclude = [object])
        df_shape = self._df_numeric.shape
        self.uiModel = ElementwiseDifference_UI(
                                        periods_max_axis0 = df_shape[0] - 1,
                                        periods_max_axis1 = df_shape[1] - 1)


    def getOutputs(self):

        try:
            # Assign local variables
            args = {'periods': self.uiModel.periods,
                    'axis': self.uiModel.axis}

            df_diff_numeric = self._df_numeric.diff(** args)
            
            return {'dataframe': df_diff_numeric}        

        except Exception as e:
            
            return self.standard_exception(e)   



enamldef ElementwiseDifference_View(GroupBox):

    attr model

    Form:

        Label:
            text = 'Periods'
            tool_tip = model.periods_tooltip
        IntField:
            value := model.periods
            minimum = 1
            maximum << (model.periods_max_axis0
                        if model.axis == 0
                        else model.periods_max_axis1)
            tool_tip = model.periods_tooltip

        Label:
            text = 'Axis'
            tool_tip = model.axis_tooltip
        ObjectCombo:
            items = model.axis_list
            selected := model.axis
            tool_tip = model.axis_tooltip

