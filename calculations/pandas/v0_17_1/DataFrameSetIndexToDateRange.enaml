# Atom
from atom.api import Atom, Bool, Int, List, Str, Value


# Enaml
from enaml.core.api import Conditional
from enaml.widgets.api import CheckBox, Form, GroupBox, Label, Notebook, ObjectCombo, Page
from custom_views.fields import Field, IntField
from custom_views.TimeZone import TimeZone_Model,TimeZone_View

# Models
from calculations._core.ABCs import ABCDataFrameToDataFrame

from pandas import date_range



class DataFrameSetIndexToDateRange_UI(Atom):

    # method
    method = Str('start / # periods')
    method_list = List(str, ['start / # periods', 
                             'end / # periods', 
                             'start / end'])
    method_tooltip = 'Select the pair of variables to specify to generate the index.'
    # start
    start = Str()
    start_tooltip = 'Left bound for generating dates.'
    # end
    end = Str()
    end_tooltip = 'Right bound for generating dates.'
    # periods
    periods = Int()
    periods_tooltip = 'Number of date periods.'
    # freq
    freq = Str('D')
    freq_list = List(str, 
                     ['B', 'C', 'D', 'W', 'M', 'BM', 'CBM', 'MS', 'BMS', 
                     'CBMS', 'Q', 'BQ', 'BQS', 'A', 'BA', 'AS', 'BAS', 
                     'BH', 'H', 'T', 'S', 'L', 'U', 'N'])
    freq_tooltip = 'Frequency of the new index.\nB: business day frequency\nC: custom business day frequency (experimental)\nD: calendar day frequency\nW: weekly frequency\nM: month end frequency\nBM: business month end frequency\nCBM: custom business month end frequency\nMS: month start frequency\nBMS: business month start frequency\nCBMS: custom business month start frequency\nQ: quarter end frequency\nBQ: business quarter endfrequency\nQS: quarter start frequency\nBQS: business quarter start frequency\nA: year end frequency\nBA: business year end frequency\nAS: year start frequency\nBAS: business year start frequency\nBH: business hour frequency\nH: hourly frequency\nT: minutely frequency\nS: secondly frequency\nL: milliseonds\nU: microseconds\nN: nanoseconds'
    # tz
    tz = Value(Atom)
    use_tz = Bool()
    tz_tooltip = 'Select to use a local timezone for the data.'
    # normalize
    normalize = Bool()
    normalize_tooltip = 'Normalize start/end dates to midnight before generating date range.'
    # name
    name = Str('DateTime')
    use_name = Bool()
    name_tooltip = 'Name of the resulting index.'
    # closed
    closed = Str('left')
    closed_list = List(str, ['left', 'right'])
    use_closed = Bool()
    closed_tooltip = 'Make the interval closed with respect to the given frequency to the left, right, or both sides (None)'



class DataFrameSetIndexToDateRange_Model(ABCDataFrameToDataFrame):


    calc_name = 'Set Index To Date Range'


    def setInputs(self, dataframe):

        self._dataframe = dataframe
        self.tz = TimeZone_Model()
        self.uiModel = DataFrameSetIndexToDateRange_UI(
            periods = len(dataframe),
            tz = self.tz.uiModel)


    def getOutputs(self):

        try:
            
            if self.uiModel.start == self.uiModel.end == '':
                return self.not_configured()

            # Assign local variables
            args = {
                'start': (self.uiModel.start
                          if 'start' in self.uiModel.method 
                          else None),
                'end': (self.uiModel.end
                        if 'end' in self.uiModel.method 
                        else None),
                'periods': (self.uiModel.periods
                            if 'periods' in self.uiModel.method 
                            else None),
                'freq': self.uiModel.freq,
                'tz': (None 
                       if not self.uiModel.use_tz 
                       else self.tz.get_time_zone()),
                'normalize': self.uiModel.normalize,
                'name': (None 
                         if not self.uiModel.use_name 
                         else self.uiModel.name),
                'closed': (None 
                           if not self.uiModel.use_closed 
                           else self.uiModel.closed)
                }
            
            
            index = date_range(**args)
            return {'dataframe': self._dataframe.set_index(index)}

        except Exception as e:

            return self.standard_exception(e)



enamldef DataFrameSetIndexToDateRange_View(GroupBox): me:

    attr model

    Form:

        Label:
            text = 'Method'
            tool_tip = model.method_tooltip
        ObjectCombo:
            items = model.method_list
            selected := model.method
            tool_tip = model.method_tooltip

        Conditional:
            condition << 'start' in model.method
            Label:
                text = 'Start'
                tool_tip = model.start_tooltip
            Field:
                text := model.start
                tool_tip = model.start_tooltip

        Conditional:
            condition << 'end' in model.method
            Label:
                text = 'End'
                tool_tip = model.end_tooltip
            Field:
                text := model.end
                tool_tip = model.end_tooltip

        Conditional:
            condition << 'periods' in model.method
            Label:
                text = 'Periods'
                tool_tip = model.periods_tooltip
            IntField:
                value := model.periods
                tool_tip = model.periods_tooltip

        Label:
            text = 'Frequency'
            tool_tip = model.freq_tooltip
        ObjectCombo:
            items = model.freq_list
            selected := model.freq
            tool_tip = model.freq_tooltip
        
        
        CheckBox:
            tool_tip = model.tz_tooltip
            text = 'Time Zone'
            checked := model.use_tz
        Label:
            text = 'N/A'
            visible << not model.use_tz
        TimeZone_View:
            model = me.model.tz
            visible << me.model.use_tz
            tool_tip = me.model.tz_tooltip

        Label:
            text = 'Normalize'
            tool_tip = model.normalize_tooltip
        CheckBox:
            checked := model.normalize
            tool_tip = model.normalize_tooltip

        CheckBox:
            tool_tip = model.name_tooltip
            text = 'Name'
            checked := model.use_name
        Label:
            text = 'N/A'
            visible << not model.use_name
        Field:
            text := model.name
            visible << model.use_name
            tool_tip = model.name_tooltip

        CheckBox:
            tool_tip = model.closed_tooltip
            text = 'Closed'
            checked := model.use_closed
        Label:
            text = 'N/A'
            visible << not model.use_closed
        ObjectCombo:
            items = model.closed_list
            selected := model.closed
            visible << model.use_closed
            tool_tip = model.closed_tooltip