# Atom
from atom.api import Atom, Bool, Int, List, Str

# Enaml
from enaml.widgets.api import CheckBox, Form, GroupBox, Label, Notebook, ObjectCombo, Page
from custom_views.fields import IntField

# Models
from _base.DataFrameGroupByAggregate import DataFrameGroupByAggregate_UI
from _base.DataFrameGroupByAggregate import DataFrameGroupByAggregate_Model
from _base.DataFrameGroupByAggregate import DataFrameGroupByAggregate_View



class DataFrameGroupByNth_UI(DataFrameGroupByAggregate_UI):

    # n
    n = Int()
    n_tooltip = 'A single nth value for the row or a list of nth values.'
    # dropna
    dropna = Str('any')
    dropna_list = List(str, ['any', 'all'])
    use_dropna = Bool()
    dropna_tooltip = (
        'Apply the specified dropna operation before counting which row is\n'
        'the nth row.'
        )



class DataFrameGroupByNth_Model(DataFrameGroupByAggregate_Model):


    calc_name = 'Select Nth'


    def __init__(self):
        
        self.func_name = 'nth'
        

    def setInputs(self, dataframegroupby):

        self._dataframegroupby = dataframegroupby
        self.uiModel = DataFrameGroupByNth_UI()


    def getArgs(self):
        
        return {
            'n': self.uiModel.n,
            'dropna': (None 
                       if not self.uiModel.use_dropna 
                       else self.uiModel.dropna)
            }



enamldef DataFrameGroupByNth_View(DataFrameGroupByAggregate_View): me:

    attr model

    Form:

        Label:
            text = 'N'
            tool_tip = model.n_tooltip
        IntField:
            value := model.n
            tool_tip = me.model.n_tooltip

        CheckBox:
            tool_tip = model.dropna_tooltip
            text = 'Dropna'
            checked := model.use_dropna
        Label:
            text = 'N/A'
            visible << not model.use_dropna
        ObjectCombo:
            items = model.dropna_list
            selected := model.dropna
            visible << model.use_dropna
            tool_tip = me.model.dropna_tooltip