# Atom
from atom.api import Atom, Bool, Str, Value


# Enaml
from enaml.core.api import Conditional
from enaml.widgets.api import CheckBox, Form, GroupBox, Label, Notebook, Page
from custom_views.fields import Field
from custom_views.RegExFlags import RegExFlags_Model, RegExFlags_View

# Models
from ._base.StringMethod import StringMethod_UI
from ._base.StringMethod import StringMethod_Model
from ._base.StringMethod import StringMethod_View



class SeriesContains_UI(StringMethod_UI):

    # pat
    pat = Str()
    pat_tooltip = 'Character sequence or regular expression.'
    # case
    case = Bool(True)
    case_tooltip = 'If True, case sensitive.'
    # regex
    regex = Bool(True)
    regex_tooltip = 'If True use re.search, otherwise use Python in operator.'
    # flags
    flags = Value(Atom)
    flags_tooltip = 're module flags'
    # na
    na = Str()
    use_na = Bool()
    na_tooltip = 'Fill value for missing values.'



class SeriesContains_Model(StringMethod_Model):


    calc_name = 'Contains'


    def __init__(self):
        
        self.func_name = 'contains'


    def setInputs(self, dataframe = None, series = None):

        self._dataframe = dataframe
        self._series = series
        
        self.regex_flags = RegExFlags_Model()
        self.ui_args = {'flags': self.regex_flags}
        self.set_inputs()
        self.uiModel = SeriesContains_UI(** self.ui_args)


    def getArgs(self):
        
        return {
            'pat': self.uiModel.pat,
            'case': self.uiModel.case,
            'regex': self.uiModel.regex,
            'flags': (self.regex_flags.get_flags()
                      if self.uiModel.regex 
                      else 0),
            'na': (None 
                   if not self.uiModel.use_na 
                   else self.uiModel.na)
            }



enamldef SeriesContains_View(StringMethod_View): me:


    attr model


    Form:

        Label:
            text = 'Pattern'
            tool_tip = model.pat_tooltip
        Field:
            text := model.pat
            tool_tip = model.pat_tooltip

        Label:
            text = 'Case Sensitive'
            tool_tip = model.case_tooltip
        CheckBox:
            checked := model.case
            tool_tip = model.case_tooltip

        Label:
            text = 'Regeular Expression'
            tool_tip = model.regex_tooltip
        CheckBox:
            checked := model.regex
            tool_tip = model.regex_tooltip

        Conditional:
            condition << model.regex
            Label:
                text = 'RegEx Flags'
                tool_tip = model.flags_tooltip
            RegExFlags_View:
                model := me.model.flags
                tool_tip = me.model.flags_tooltip

        CheckBox:
            tool_tip = model.na_tooltip
            text = 'Fill Value'
            checked := model.use_na
        Label:
            text = 'N/A'
            visible << not model.use_na
        Field:
            text := model.na
            visible << model.use_na
            tool_tip = model.na_tooltip