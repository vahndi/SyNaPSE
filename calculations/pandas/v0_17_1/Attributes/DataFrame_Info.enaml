# Enaml
from enaml.widgets.api import GroupBox

# Models
from calculations._core.ABCs import ABCTakesDataFrame
from pandas import Series, Index, concat
import matplotlib.pyplot as plt
import seaborn as sns


def getPublicAttributes(obj):
    '''
    Returns a list of an object's public attributes
    '''
    return [a for a in dir(obj) 
            if not a.startswith('_') 
            and not callable(getattr(obj, a))]


def labelSeries(series, name, index_name):
    
    return Series(series,
                  name = name,
                  index = Index(series.index,
                              name = index_name)
                  )


def getHistogramFigure(data):
    
    fig = plt.figure()
    ax = fig.add_subplot(111)
    data.hist(ax = ax)
    return fig


def getStats(dataframe):
    
    # N.B. Can't use mode because it may return more than one value
    df = dataframe.select_dtypes(['number'])
    df_stats = concat([df.mean(), df.mad(), df.median(), df.min(),
                       df.max(), df.std(), df.var(), df.sem(),
                       df.skew(), df.kurt()], 
                      axis = 1)
    df_stats.columns = ['Mean', 'Mean Absolute Deviation', 'Median', 
                        'Minimum', 'Maximum', 'Standard Deviation', 'Variance', 
                        'Standard Error of Mean', 'Skew', 'Kurtosis']
    df_stats = df_stats.transpose()
    df_stats.index.name = 'Statistic'
    
    return df_stats


def getIndexAttributes(index):
    
    attr_dict = {}

    # bool attributes
    bool_attrs = ['has_duplicates', 'hasnans', 'is_all_dates', 
                  'is_monotonic', 'is_monotonic_decreasing', 
                  'is_monotonic_increasing']
    bools = Series({a: getattr(index, a) for a in bool_attrs},
                   name = 'bools')
    attr_dict['bools'] = bools

    # int attributes
    int_attrs = ['itemsize', 'nbytes', 'ndim', 'nlevels', 'size']
    ints = Series({a: getattr(index, a) for a in int_attrs},
                   name = 'ints')
    attr_dict['ints'] = ints

    # str attributes
    str_attrs = ['dtype', 'dtype_str', 'inferred_type', 'name']
    strs = Series({a: getattr(index, a) for a in str_attrs},
                   name = 'strs')
    attr_dict['strs'] = strs

    # tuple attributes
    tuple_attrs = ['shape', 'strides']
    tuples = Series({a: getattr(index, a) for a in tuple_attrs},
                    name = 'tuples')
    attr_dict['tuples'] = tuples

    # flags
    attr_dict['flags'] = Series({a: getattr(index.flags, a)
                                 for a in getPublicAttributes(index.flags)},
                                name = 'flags')

    # values
    attr_dict['values'] = index.values
    

    return attr_dict


def getIndexMethodValues(index):
    
    if index.has_duplicates:
        info_dict['duplicates'] = index.get_duplicates()     



class DataFrame_Info_Model(ABCTakesDataFrame):
    

    calc_name = 'Info'

    
    def setInputs(self, dataframe):

        self._dataframe = dataframe


    def getOutputs(self):
        
        try:
            
            df = self._dataframe
            
            return {'dataframe': df,
                    'Attributes':
                        {'columns':  getIndexAttributes(df.columns),
                        'dtypes': labelSeries(df.dtypes, 'dtype', 'column'),
                        'dtype_counts': labelSeries(df.get_dtype_counts(), 
                                                     'count', 'dtype'),
                        'index': getIndexAttributes(df.index),
                        'ndim': df.ndim,
                        'size': df.size,
                        'shape': df.shape
                        },
                     'Methods':
                         {'describe': {str(dt): df.describe(include = [dt]) 
                                       for dt in df.dtypes.unique()}},
                     'Plots':
                         {'Histogram': 
                             {'All': getHistogramFigure(df),
                              'Individual': {col: getHistogramFigure(df[col])
                                             for col in df.select_dtypes(
                                                           ['number']).columns}
                              }
                          },
                     'Stats': getStats(df)
                    }
        
        except Exception as e:
            
            return self.standard_exception(e)
            
            

enamldef DataFrame_Info_View(GroupBox):
    
    pass