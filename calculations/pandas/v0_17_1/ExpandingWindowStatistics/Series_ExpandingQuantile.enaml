# Atom
from atom.api import Atom, Bool, Float, Int, List, Str

# Enaml
from enaml.widgets.api import CheckBox, Form, GroupBox, Label, ObjectCombo
from custom_views.fields import FloatField, IntField

# Models
from calculations._core.ABCs import ABCSeriesToSeries

from pandas import expanding_quantile
from modules.pandas_helpers import pandas_freqs, pandas_freq_tooltip



class Series_ExpandingQuantile_UI(Atom):

    # quantile
    quantile = Float(0.5)
    quantile_min = Float(0)
    quantile_max = Float(1)
    # min_periods
    min_periods = Int(1)
    min_periods_min = Int(1)
    use_min_periods = Bool(True)
    min_periods_tooltip = (
        'Minimum number of observations in window required to have a value\n' + 
        '(otherwise result is NA).'
        )
    # freq
    freq = Str('D')
    freq_list = List(str, pandas_freqs)
    use_freq = Bool()
    freq_tooltip = pandas_freq_tooltip



class Series_ExpandingQuantile_Model(ABCSeriesToSeries):


    calc_name = 'Expanding Quantile'


    def setInputs(self, series = None):

        self._series = series
        self.uiModel = Series_ExpandingQuantile_UI()


    def getOutputs(self):

        try:

            # Assign local variables
            args = {
                'arg': self._series,
                'quantile': self.uiModel.quantile,
                'min_periods': (None 
                                if not self.uiModel.use_min_periods 
                                else self.uiModel.min_periods),
                'freq': (None 
                         if not self.uiModel.use_freq 
                         else self.uiModel.freq)
                }

            # apply function
            statistic = expanding_quantile(** args)
            
            return {'series': statistic}

        except Exception as e:

            return self.standard_exception(e)



enamldef Series_ExpandingQuantile_View(GroupBox): me:

    attr model

    Form:

        Label:
            text = 'Quantile'
        FloatField:
            value := model.quantile
            minimum = model.quantile_min
            maximum = model.quantile_max

        CheckBox:
            tool_tip = model.min_periods_tooltip
            text = 'Min Periods'
            checked := model.use_min_periods
        Label:
            text = 'N/A'
            visible << not model.use_min_periods
        IntField:
            value := model.min_periods
            minimum = model.min_periods_min
            visible << model.use_min_periods
            tool_tip = model.min_periods_tooltip

        CheckBox:
            tool_tip = model.freq_tooltip
            text = 'Freq'
            checked := model.use_freq
        Label:
            text = 'N/A'
            visible << not model.use_freq
        ObjectCombo:
            items = model.freq_list
            selected := model.freq
            visible << model.use_freq
            tool_tip = model.freq_tooltip