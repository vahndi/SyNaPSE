# Atom
from atom.api import Atom, Bool, Int, List, Str


# Enaml
from enaml.widgets.api import CheckBox, Form, GroupBox, Label, Notebook, ObjectCombo, Page
from custom_views.fields import IntField

# Models
from calculations._core.ABCs import ABCDataFrameToDataFrame, ABCSeriesToSeries

# Pandas
import pandas as pd
from pandas import DataFrame, Series, concat
from modules.pandas_helpers import pandas_freqs, pandas_freq_tooltip



class ExpandingStatistic_UI(Atom):

    # min_periods
    min_periods = Int(1)
    min_periods_min = Int(1)
    # freq
    freq = Str('D')
    freq_list = List(str, pandas_freqs)
    use_freq = Bool()
    freq_tooltip = pandas_freq_tooltip



class ExpandingStatistic_Model(ABCDataFrameToDataFrame, ABCSeriesToSeries):


    def setInputs(self, dataframe = None, series = None):

        self._dataframe = dataframe
        self._series = series
        self.uiModel = ExpandingStatistic_UI()


    def getOutputs(self):

        try:

            # Assign local variables
            args = {
                'min_periods': self.uiModel.min_periods,
                'freq': (None 
                         if not self.uiModel.use_freq 
                         else self.uiModel.freq)
                }

            if self._dataframe is not None:
                df_numeric = self._dataframe.select_dtypes(['number'])
                df_object = self._dataframe.select_dtypes(['object'])
                args['arg'] = df_numeric
            else:
                args['arg'] = self._series

            # apply function
            func = getattr(pd, self.outputFunction)
            expanding_stat = func(** args)
            
            if self._dataframe is not None:
                df_joined = concat([df_object, expanding_stat], axis = 1)
                df_joined = df_joined[[col for col in self._dataframe.columns]]
                return {'dataframe': df_joined}                
            else:
                return {'series': expanding_stat}

        except Exception as e:

            return self.standard_exception(e)



enamldef ExpandingStatistic_View(GroupBox): me:

    attr model

    Form:

        Label:
            text = 'Min Periods'
        IntField:
            value := model.min_periods
            minimum = model.min_periods_min

        CheckBox:
            tool_tip = model.freq_tooltip
            text = 'Freq'
            checked := model.use_freq
        Label:
            text = 'N/A'
            visible << not model.use_freq
        ObjectCombo:
            items = model.freq_list
            selected := model.freq
            visible << model.use_freq
            tool_tip = model.freq_tooltip