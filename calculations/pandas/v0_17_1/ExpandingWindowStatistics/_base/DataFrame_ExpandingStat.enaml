# Atom
from atom.api import Atom, Bool, Int, List, Str

# Models
from calculations._core.ABCs import ABCDataFrameToDataFrame

# Pandas
import pandas as pd
from pandas import DataFrame, concat
from ExpandingStat import ExpandingStat_UI, ExpandingStat_View




class DataFrame_ExpandingStat_Model(ABCDataFrameToDataFrame):


    def setInputs(self, dataframe = None):

        self._dataframe = dataframe
        self.uiModel = ExpandingStat_UI()


    def getOutputs(self):

        try:

            # assign local variables
            args = {
                'min_periods': self.uiModel.min_periods,
                'freq': (None 
                         if not self.uiModel.use_freq 
                         else self.uiModel.freq)
                }

            # split dataframe
            df_numeric = self._dataframe.select_dtypes(['number'])
            df_object = self._dataframe.select_dtypes(['object'])
            args['arg'] = df_numeric

            # apply function
            func = getattr(pd, self.outputFunction)
            expanding_stat = func(** args)
            
            # join dataframe
            df_joined = concat([df_object, expanding_stat], axis = 1)
            df_joined = df_joined[[col for col in self._dataframe.columns]]
            
            return {'dataframe': df_joined}

        except Exception as e:

            return self.standard_exception(e)



enamldef DataFrame_ExpandingStat_View(ExpandingStat_View): me:

    pass