# Atom
from atom.api import Atom, Bool, Float, Int, List, Str


# Enaml
from enaml.core.api import Conditional
from enaml.widgets.api import CheckBox, Form, GroupBox, Label, Notebook, ObjectCombo, Page
from custom_views.fields import FloatField, IntField

# Models
from calculations._core.ABCs import ABCDataFrameToDataFrame, ABCSeriesToSeries
from pandas import DataFrame, Series, concat
from pandas.stats.moments import rolling_quantile

# Helpers
from modules.pandas_helpers import pandas_freqs, pandas_freq_tooltip



class RollingQuantile_UI(Atom):

    # quantile
    quantile = Float(0.5)
    quantile_min = Float(0)
    quantile_max = Float(1)
    # window
    window = Int(1)
    window_min = Int(1)
    window_tooltip = 'Window length.'
    # min_periods
    min_periods = Int(1)
    min_periods_min = Int(1)
    use_min_periods = Bool()
    min_periods_tooltip = 'Minimum number of observations in window required to have a value (otherwise result is NA).'
    # freq
    freq = Str('D')
    freq_list = List(str, pandas_freqs)
    use_freq = Bool()
    freq_tooltip = pandas_freq_tooltip
    # center
    center = Bool()
    center_tooltip = 'Whether the label should correspond with center of window.'



class RollingQuantile_Model(ABCDataFrameToDataFrame, ABCSeriesToSeries):


    calc_name = 'Rolling Quantile'


    def setInputs(self, dataframe = None, series = None):

        self._dataframe = dataframe
        self._series = series
        self.uiModel = RollingQuantile_UI()


    def getOutputs(self):

        try:

            # Assign local variables
            args = {
                'quantile': self.uiModel.quantile,
                'window': self.uiModel.window,
                'min_periods': (None 
                                if not self.uiModel.use_min_periods 
                                else self.uiModel.min_periods),
                'freq': (None 
                         if not self.uiModel.use_freq 
                         else self.uiModel.freq),
                'center': self.uiModel.center,
                }
            if self._dataframe is not None:
                df_numeric = self._dataframe.select_dtypes(['number'])
                df_object = self._dataframe.select_dtypes(['object'])
                args['arg'] = df_numeric
            else:
                args['arg'] = self._series

            # apply function
            statistic = rolling_quantile(** args)
            
            if self._dataframe is not None:
                df_joined = concat([df_object, statistic], axis = 1)
                df_joined = df_joined[[col for col in self._dataframe.columns]]
                return {'dataframe': df_joined}                
            else:
                return {'series': statistic}

        except Exception as e:

            return self.standard_exception(e)



enamldef RollingQuantile_View(GroupBox): me:

    attr model

    Form:
        
        Label:
            text = 'Quantile'
        FloatField:
            value := model.quantile
            minimum = model.quantile_min
            maximum = model.quantile_max

        Label:
            text = 'Window Length'
            tool_tip = model.window_tooltip
        IntField:
            value := model.window
            minimum = model.window_min
            tool_tip = model.window_tooltip
    

        CheckBox:
            tool_tip = model.min_periods_tooltip
            text = 'Min Periods'
            checked := model.use_min_periods
        Label:
            text = 'N/A'
            visible << not model.use_min_periods
        IntField:
            value := model.min_periods
            minimum = model.min_periods_min
            visible << model.use_min_periods
            tool_tip = model.min_periods_tooltip

        CheckBox:
            tool_tip = model.freq_tooltip
            text = 'Freq'
            checked := model.use_freq
        Label:
            text = 'N/A'
            visible << not model.use_freq
        ObjectCombo:
            items = model.freq_list
            selected := model.freq
            visible << model.use_freq
            tool_tip = model.freq_tooltip

        Label:
            text = 'Center'
            tool_tip = model.center_tooltip
        CheckBox:
            checked := model.center
            tool_tip = model.center_tooltip
