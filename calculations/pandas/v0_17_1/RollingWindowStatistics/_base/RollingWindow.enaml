# Atom
from atom.api import Atom, Bool, Float, Int, List, Str

# Enaml
from enaml.core.api import Conditional
from enaml.widgets.api import CheckBox, Form, GroupBox, Label, Notebook, ObjectCombo, Page
from custom_views.fields import FloatField, IntField

# Models
from calculations._core.ABCs import ABCDataFrameToDataFrame, ABCSeriesToSeries
from pandas import DataFrame, Series, concat
from pandas.stats.moments import rolling_window

# Helpers
from modules.numpy_helpers import aggregate_funcs
from modules.pandas_helpers import pandas_freqs, pandas_freq_tooltip



class RollingWindow_UI(Atom):

    # window
    window = Int(1)
    window_min = Int(1)
    window_tooltip = 'Window length.'
    # win_type
    win_type = Str('boxcar')
    win_type_list = List(str, ['boxcar', 'triang', 'blackman', 'hamming', 
                               'bartlett', 'parzen', 'bohman', 'blackmanharris', 
                               'nuttall', 'barthann', 'kaiser', 'gaussian', 
                               'general_gaussian', 'slepian'])
    win_type_tooltip = 'Window type.'
    # beta
    beta = Float()
    # std
    std = Float()
    # power
    power = Float()
    # width
    width = Float()
    # min_periods
    min_periods = Int(1)
    min_periods_min = Int(1)
    use_min_periods = Bool()
    min_periods_tooltip = (
        'Minimum number of observations in window required to have a value\n' + 
        '(otherwise result is NA).'
        )
    # freq
    freq = Str('D')
    freq_list = List(str, pandas_freqs)
    use_freq = Bool()
    freq_tooltip = pandas_freq_tooltip
    # center
    center = Bool()
    center_tooltip = (
        'Whether the label should correspond with center of window.'
        )
    # mean
    mean = Bool(True)
    mean_tooltip = 'If True computes weighted mean, else weighted sum.'
    # axis
    show_axis = Bool()
    axis = Str('index')
    axis_list = List(str, ['index', 'columns'])
    # how
    how = Str('mean')
    how_list = List(str, aggregate_funcs)
    how_tooltip = 'Method for down- or re-sampling.'



class RollingWindow_Model(object):


    calc_name = 'Rolling Window'
    

    def getArgs(self):

        return {
            'window': self.uiModel.window,
            'win_type': self.uiModel.win_type,
            'beta': (self.uiModel.beta
                     if self.uiModel.win_type == 'kaiser' 
                     else None),
            'std': (self.uiModel.std
                    if self.uiModel.win_type == 'gaussian' 
                    else None),
            'power': (self.uiModel.power
                      if self.uiModel.win_type == 'general gaussian' 
                      else None),
            'width': (self.uiModel.width
                      if self.uiModel.win_type in ('general gaussian', 
                                                   'slepian') 
                      else None),
            'min_periods': (None 
                            if not self.uiModel.use_min_periods 
                            else self.uiModel.min_periods),
            'freq': (None 
                     if not self.uiModel.use_freq 
                     else self.uiModel.freq),
            'center': self.uiModel.center,
            'mean': self.uiModel.mean,
            'axis': ({'index': 0, 'columns': 1 }[self.uiModel.axis]
                     if self.uiModel.show_axis
                     else 0),
            'how': self.uiModel.how
            }



enamldef RollingWindow_View(GroupBox): me:

    attr model

    Form:

        Label:
            text = 'Window Length'
            tool_tip = model.window_tooltip
        IntField:
            value := model.window
            minimum = model.window_min
            tool_tip = model.window_tooltip

        Label:
            text = 'Window Type'
            tool_tip = model.win_type_tooltip
        ObjectCombo:
            items = model.win_type_list
            selected := model.win_type
            tool_tip = model.win_type_tooltip

        Conditional:
            condition << model.win_type == 'kaiser'
            Label:
                text = 'Beta'
            FloatField:
                value := model.beta
    
        Conditional:
            condition << model.win_type == 'gaussian'
            Label:
                text = 'Std'
            FloatField:
                value := model.std
    
        Conditional:
            condition << model.win_type == 'general gaussian'
            Label:
                text = 'Power'
            FloatField:
                value := model.power
    
        Conditional:
            condition << model.win_type in ('general gaussian', 'slepian')
            Label:
                text = 'Width'
            FloatField:
                value := model.width
    

        CheckBox:
            tool_tip = model.min_periods_tooltip
            text = 'Min Periods'
            checked := model.use_min_periods
        Label:
            text = 'N/A'
            visible << not model.use_min_periods
        IntField:
            value := model.min_periods
            minimum = model.min_periods_min
            visible << model.use_min_periods
            tool_tip = model.min_periods_tooltip

        CheckBox:
            tool_tip = model.freq_tooltip
            text = 'Freq'
            checked := model.use_freq
        Label:
            text = 'N/A'
            visible << not model.use_freq
        ObjectCombo:
            items = model.freq_list
            selected := model.freq
            visible << model.use_freq
            tool_tip = model.freq_tooltip

        Label:
            text = 'Center'
            tool_tip = model.center_tooltip
        CheckBox:
            checked := model.center
            tool_tip = model.center_tooltip

        Label:
            text = 'Mean'
            tool_tip = model.mean_tooltip
        CheckBox:
            checked := model.mean
            tool_tip = model.mean_tooltip

        Conditional:
            condition = model.show_axis
            Label:
                text = 'Axis'
            ObjectCombo:
                items = model.axis_list
                selected := model.axis

        Label:
            text = 'Resampling Method'
            tool_tip = model.how_tooltip
        ObjectCombo:
            items = model.how_list
            selected := model.how
            tool_tip = model.how_tooltip

