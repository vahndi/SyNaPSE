# Atom
from atom.api import Atom, Bool, Int, List, Str

# Enaml
from enaml.core.api import Conditional
from enaml.widgets.api import CheckBox, Form, GroupBox, Label, ObjectCombo
from custom_views.fields import IntField

# Models
from calculations._core.ABCs import ABCDataFrameToDataFrame, ABCSeriesToSeries

# Pandas
import pandas as pd
from pandas import DataFrame, Series, concat
from pandas.stats.moments import rolling_count

# Helpers
from modules.numpy_helpers import aggregate_funcs
from modules.pandas_helpers import pandas_freqs, pandas_freq_tooltip



class RollingCount_UI(Atom):

    # window
    window = Int(1)
    window_min = Int(1)
    window_tooltip = (
        'Size of the moving window. This is the number of observations\n' +
        'used for calculating the statistic.'
        )
    # center
    center = Bool()
    center_tooltip = (
        'Set the labels at the center of the window.\n' +
        '(By default, the result is set to the right edge of the window).'
        )
    # resample
    resample = Bool()
    resample_tooltip = (
        'Resample the data to a user-specified frequency before computing\n' + 
        'the statistic.'
        )
    # freq
    freq = Str('D')
    freq_list = List(str, pandas_freqs)
    freq_tooltip = pandas_freq_tooltip
    # how
    how = Str()
    how_list = List(str, aggregate_funcs)
    how_tooltip = 'Method for down- or re-sampling.'



class RollingCount_Model(object):


    def getArgs(self):
        
        return {
            'window': self.uiModel.window,
            'center': self.uiModel.center,
            'freq': (self.uiModel.freq
                     if self.uiModel.resample == True 
                     else None),
            'how': (self.uiModel.how
                    if self.uiModel.resample == True 
                    else None)
            }



enamldef RollingCount_View(GroupBox): me:

    attr model

    Form:

        Label:
            text = 'Window'
            tool_tip = model.window_tooltip
        IntField:
            value := model.window
            minimum = model.window_min
            tool_tip = model.window_tooltip

        Label:
            text = 'Center'
            tool_tip = model.center_tooltip
        CheckBox:
            checked := model.center
            tool_tip = model.center_tooltip

        Label:
            text = 'Resample'
            tool_tip = model.resample_tooltip
        CheckBox:
            checked := model.resample
            tool_tip = model.resample_tooltip

        Conditional:
            condition << model.resample == True
            
            Label:
                text = 'Frequency'
                tool_tip = model.freq_tooltip
            ObjectCombo:
                items = model.freq_list
                selected := model.freq
                tool_tip = model.freq_tooltip

            Label:
                text = 'Resampling Method'
                tool_tip = model.how_tooltip
            ObjectCombo:
                items = model.how_list
                selected := model.how
                tool_tip = model.how_tooltip