# Atom
from atom.api import Atom, Bool, Int, List, Str

# Enaml
from enaml.core.api import Conditional
from enaml.widgets.api import CheckBox, Form, GroupBox, Label, Notebook, ObjectCombo, Page
from custom_views.fields import IntField

from modules.numpy_helpers import aggregate_funcs



class RollingStat_UI(Atom):

    # window
    window = Int(1)
    window_min = Int(1)
    window_tooltip = (
        'Size of the moving window. This is the number of observations\n' +
        'used for calculating the statistic.'
        )
    # min_periods
    min_periods = Int()
    min_periods_min = Int(1)
    use_min_periods = Bool()
    min_periods_tooltip = (
        'Minimum number of observations in window required to have a \n' + 
        'value (otherwise result is NA).'
        )
    # center
    center = Bool()
    center_tooltip = (
        'Set the labels at the center of the window.\n' +
        '(By default, the result is set to the right edge of the window).'
        )
    # resample
    resample = Bool()
    resample_tooltip = (
        'Resample the data to a user-specified frequency before computing\n' +
        'the statistic.'
        )
    # freq
    freq = Str('D')
    freq_list = List(str, 
                     ['B', 'C', 'D', 'W', 'M', 'BM', 'CBM', 'MS', 'BMS', 
                     'CBMS', 'Q', 'BQ', 'BQS', 'A', 'BA', 'AS', 'BAS', 
                     'BH', 'H', 'T', 'S', 'L', 'U', 'N'])
    freq_tooltip = (
        'Frequency to conform the data to before computing the statistic.\n' +
        'B: business day frequency\n' +
        'C: custom business day frequency (experimental)\n' +
        'D: calendar day frequency\n' +
        'W: weekly frequency\n' +
        'M: month end frequency\n' +
        'BM: business month end frequency\n' +
        'CBM: custom business month end frequency\n' +
        'MS: month start frequency\n' +
        'BMS: business month start frequency\n' +
        'CBMS: custom business month start frequency\n' +
        'Q: quarter end frequency\n' +
        'BQ: business quarter endfrequency\n' +
        'QS: quarter start frequency\n' +
        'BQS: business quarter start frequency\n' +
        'A: year end frequency\n' +
        'BA: business year end frequency\n' +
        'AS: year start frequency\n' +
        'BAS: business year start frequency\n' +
        'BH: business hour frequency\n' +
        'H: hourly frequency\n' +
        'T: minutely frequency\n' +
        'S: secondly frequency\n' +
        'L: milliseonds\n' +
        'U: microseconds\n' +
        'N: nanoseconds'
        )
    # how
    how = Str()
    how_list = List(str, aggregate_funcs)
    how_tooltip = 'Method for down- or re-sampling.'
    


class RollingStat_Model(object):
    
    
    def getArgs(self):
        
        return {
            'window': self.uiModel.window,
            'min_periods': (None 
                            if not self.uiModel.use_min_periods 
                            else self.uiModel.min_periods),
            'center': self.uiModel.center,
            'freq': (self.uiModel.freq
                     if self.uiModel.resample == True 
                     else None),
            'how': (self.uiModel.how
                    if self.uiModel.resample == True 
                    else None)
            }



enamldef RollingStat_View(GroupBox): me:

    attr model

    Form:

        Label:
            text = 'Window'
            tool_tip = model.window_tooltip
        IntField:
            value := model.window
            minimum = model.window_min
            tool_tip = model.window_tooltip

        CheckBox:
            tool_tip = model.min_periods_tooltip
            text = 'Min Periods'
            checked := model.use_min_periods
        Label:
            text = 'N/A'
            visible << not model.use_min_periods
        IntField:
            value := model.min_periods
            minimum = model.min_periods_min
            visible << model.use_min_periods
            tool_tip = model.min_periods_tooltip

        Label:
            text = 'Center'
            tool_tip = model.center_tooltip
        CheckBox:
            checked := model.center
            tool_tip = model.center_tooltip

        Label:
            text = 'Resample'
            tool_tip = model.resample_tooltip
        CheckBox:
            checked := model.resample
            tool_tip = model.resample_tooltip

        Conditional:
            condition << model.resample == True
            
            Label:
                text = 'Frequency'
                tool_tip = model.freq_tooltip
            ObjectCombo:
                items = model.freq_list
                selected := model.freq
                tool_tip = model.freq_tooltip

            Label:
                text = 'Resampling Method'
                tool_tip = model.how_tooltip
            ObjectCombo:
                items = model.how_list
                selected := model.how
                tool_tip = model.how_tooltip