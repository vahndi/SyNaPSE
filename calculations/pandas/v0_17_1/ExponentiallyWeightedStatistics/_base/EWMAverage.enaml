# Atom
from atom.api import Atom, Bool, Float, Int, List, Str

# Enaml
from enaml.core.api import Conditional
from enaml.widgets.api import CheckBox, Form, GroupBox, Label, ObjectCombo
from custom_views.fields import FloatField, IntField
from modules.pandas_helpers import pandas_freqs, pandas_freq_tooltip
from modules.numpy_helpers import aggregate_funcs



class EWMAverage_UI(Atom):

    # decay_method
    decay_method = Str('center of mass')
    decay_method_list = List(str, ['center of mass', 'span', 'halflife'])
    decay_method_tooltip = 'Specify how to calculate the Decay.'
    # com
    com = Float()
    com_tooltip = 'Calculate Decay from Center of Mass.\\nalpha = 1 / (1 + CoM)'
    # span
    span = Float()
    span_tooltip = 'Calculate Decay from Span.\\nalpha = 2 / (Span + 1)'
    # halflife
    halflife = Float()
    halflife_tooltip = 'Calculate Decay from Halflife.\\nalpha = 1 - exp( log(0.5) / Halflife )'
    # min_periods
    min_periods = Int(0)
    min_periods_tooltip = 'Minimum number of observations in window required to have a value (otherwise result is NA).'
    # freq
    freq = Str('D')
    freq_list = List(str, pandas_freqs)
    use_freq = Bool()
    freq_tooltip = pandas_freq_tooltip
    # how
    how = Str('mean')
    how_list = List(str, aggregate_funcs)
    how_tooltip = 'Method for down- or re-sampling.'
    # ignore_na
    ignore_na = Bool()
    ignore_na_tooltip = 'Ignore missing values when calculating weights.'
    # adjust
    adjust = Bool(True)
    adjust_tooltip = 'Divide by decaying adjustment factor in beginning periods to account for imbalance in relative weightings (viewing EWMA as a moving average).'



class EWMAverage_Model(object):


    calc_name = 'Exponentially Weighted Moving Average'


    def getArgs(self):
        
        return {
            'com': (self.uiModel.com
                    if self.uiModel.decay_method == 'center of mass' 
                    else None),
            'span': (self.uiModel.span
                     if self.uiModel.decay_method == 'span' 
                     else None),
            'halflife': (self.uiModel.halflife
                         if self.uiModel.decay_method == 'halflife' 
                         else None),
            'min_periods': self.uiModel.min_periods,
            'freq': (None 
                     if not self.uiModel.use_freq 
                     else self.uiModel.freq),
            'how': self.uiModel.how,
            'ignore_na': self.uiModel.ignore_na,
            'adjust': self.uiModel.adjust
            }



enamldef EWMAverage_View(GroupBox): me:

    attr model

    Form:

        Label:
            text = 'Decay Method'
            tool_tip = model.decay_method_tooltip
        ObjectCombo:
            items = model.decay_method_list
            selected := model.decay_method
            tool_tip = model.decay_method_tooltip

        Conditional:
            condition << model.decay_method == 'center of mass'
            Label:
                text = 'Center of Mass'
                tool_tip = model.com_tooltip
            FloatField:
                value := model.com
                tool_tip = model.com_tooltip
    

        Conditional:
            condition << model.decay_method == 'span'
            Label:
                text = 'Span'
                tool_tip = model.span_tooltip
            FloatField:
                value := model.span
                tool_tip = model.span_tooltip
    

        Conditional:
            condition << model.decay_method == 'halflife'
            Label:
                text = 'Halflife'
                tool_tip = model.halflife_tooltip
            FloatField:
                value := model.halflife
                tool_tip = model.halflife_tooltip
    

        Label:
            text = 'Min Periods'
            tool_tip = model.min_periods_tooltip
        IntField:
            value := model.min_periods
            tool_tip = model.min_periods_tooltip


        CheckBox:
            tool_tip = model.freq_tooltip
            text = 'Frequency'
            checked := model.use_freq
        Label:
            text = 'N/A'
            visible << not model.use_freq
        ObjectCombo:
            items = model.freq_list
            selected := model.freq
            visible << model.use_freq
            tool_tip = model.freq_tooltip

        Label:
            text = 'Resampling Method'
            tool_tip = model.how_tooltip
        ObjectCombo:
            items = model.how_list
            selected := model.how
            tool_tip = model.how_tooltip
    

        Label:
            text = 'Ignore NA'
            tool_tip = model.ignore_na_tooltip
        CheckBox:
            checked := model.ignore_na
            tool_tip = model.ignore_na_tooltip

        Label:
            text = 'Adjust'
            tool_tip = model.adjust_tooltip
        CheckBox:
            checked := model.adjust
            tool_tip = model.adjust_tooltip