# Atom
from atom.api import Atom, Bool, ContainerList, List, Str, Value

# Enaml
from enaml.core.api import Conditional
from enaml.widgets.api import CheckBox, Form, GroupBox, Label, Notebook, ObjectCombo, Page
from custom_views.OrderedList import OrderedList_Model, OrderedList_View
from custom_views.CheckBoxList import CheckBoxList_Model, CheckBoxList_View

# Models
from calculations.core.ABCs import ABCDataFrameToDataFrame



class SortRows_UI(Atom):

    # by_type
    by_type = Str('single')
    by_type_list = List(str, ['single', 'multiple'])
    by_type_tooltip = 'Sort by a single or multiple columns.'
    # by_single
    by_single = Str()
    by_single_list = List(str)
    by_single_tooltip = 'Select the column to sort by.'
    # by_multiple
    by_multiple = Value(Atom)
    by_multiple_tooltip = 'Select the list of column names to sort by, in order of priority.'
    # ascending_type
    ascending_type = Str('uniform')
    ascending_type_list = List(str, ['uniform', 'individual'])
    ascending_type_tooltip = 'Specify the sort order for sort columns all at once (uniform) or individually.'
    # ascending_uniform
    ascending_uniform = Bool(True)
    ascending_uniform_tooltip = 'Sort the selected column(s) in ascending (True) or descending (False) order.'
    # ascending_individual
    ascending_individual = Value(Atom)
    ascending_individual_tooltip = 'Sort the selected column(s) in ascending (True) or descending (False) order.'
    # kind
    kind = Str('quicksort')
    kind_list = List(str, ['quicksort', 'mergesort', 'heapsort'])
    kind_tooltip = 'Choice of sorting algorithm. See also ndarray.np.sort for more information.\nmergesort is the only stable algorithm. \nFor DataFrames, this option is only applied when sorting on a single column or label.'
    # na_position
    na_position = Str('last')
    na_position_list = List(str, ['first', 'last'])
    na_position_tooltip = 'first: put NaNs at the beginning\nlast: put NaNs at the end'


class SortRows_Model(ABCDataFrameToDataFrame):


    calc_name = 'Sort Rows'


    def setInputs(self, dataframe):

        self._dataframe = dataframe
        cols = list(dataframe.columns)
        self.ascending_individual = CheckBoxList_Model([])
        self.by_multiple = OrderedList_Model(
                item_names = cols,
                fn_selected_changed = self.ascending_individual.set_item_names
                )
        self.uiModel = SortRows_UI(
            by_single = cols[0],
            by_single_list = cols, 
            by_multiple = self.by_multiple.uiModel,
            ascending_individual = self.ascending_individual.uiModel
            )


    def getOutputs(self):

        try:

            # Assign local variables
            args = {
                'by': (self.uiModel.by_single
                       if self.uiModel.by_type == 'single' 
                       else self.by_multiple.selected_item_names()),
                'ascending': (self.ascending_individual.item_check_values()
                              if (self.uiModel.ascending_type == 'individual' and
                                  self.uiModel.by_type == 'multiple')
                              else self.uiModel.ascending_uniform),
                'kind': self.uiModel.kind,
                'na_position': self.uiModel.na_position
                }
                
            return {'dataframe': self._dataframe.sort_values(** args)}

        except Exception as e:

            return self.standard_exception(e)



enamldef SortRows_View(GroupBox): me:

    attr model

    Form:

        Label:
            text = 'Column Type'
            tool_tip = model.by_type_tooltip
        ObjectCombo:
            items = model.by_type_list
            selected := model.by_type
            tool_tip = model.by_type_tooltip

        Conditional:
            condition << model.by_type == 'single'
            Label:
                text = 'Sort Column'
                tool_tip = model.by_single_tooltip
            ObjectCombo:
                items = model.by_single_list
                selected := model.by_single
                tool_tip = model.by_single_tooltip
    

        Conditional:
            condition << model.by_type == 'multiple'
            Label:
                text = 'Sort Columns'
                tool_tip = model.by_multiple_tooltip
            OrderedList_View:
                model:= me.model.by_multiple
                tool_tip = me.model.by_multiple_tooltip
    
        Conditional:
            condition << model.by_type == 'multiple'
            Label:
                text = 'Ascending Type'
                tool_tip = model.ascending_type_tooltip
            ObjectCombo:
                items = model.ascending_type_list
                selected := model.ascending_type
                tool_tip = model.ascending_type_tooltip


        Conditional:
            condition << not (model.ascending_type == 'individual' and
                              model.by_type == 'multiple')
            Label:
                text = 'Ascending'
                tool_tip = model.ascending_uniform_tooltip
            CheckBox:
                checked := model.ascending_uniform
                tool_tip = model.ascending_uniform_tooltip
    

        Conditional:
            condition << (model.ascending_type == 'individual' and 
                          model.by_type == 'multiple')
            Label:
                text = 'Ascending'
                tool_tip = model.ascending_individual_tooltip
            CheckBoxList_View:
                model:= me.model.ascending_individual
                tool_tip = me.model.ascending_individual_tooltip
    

        Label:
            text = 'Kind'
            tool_tip = model.kind_tooltip
        ObjectCombo:
            items = model.kind_list
            selected := model.kind
            tool_tip = model.kind_tooltip

        Label:
            text = 'NA Position'
            tool_tip = model.na_position_tooltip
        ObjectCombo:
            items = model.na_position_list
            selected := model.na_position
            tool_tip = model.na_position_tooltip