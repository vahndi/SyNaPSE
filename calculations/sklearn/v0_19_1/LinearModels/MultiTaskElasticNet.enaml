# Atom
from atom.api import Atom, Bool, Float, Int, List, Str, Value

# Enaml
from enaml.widgets.api import CheckBox, Form, GroupBox, Label, Notebook, ObjectCombo, Page
from custom_views.fields import FloatField, IntField
from custom_views.InputsTargetsSelector import InputsTargetsSelector_View

# Models
from ._base.regression_model import ABCRegressionModel
from sklearn.linear_model import MultiTaskElasticNet



class MultiTaskElasticNet_UI(Atom):

    input_selector = Value(Atom)
        
    # alpha
    alpha = Float(1)
    alpha_min = Float(0)
    alpha_tooltip = 'Constant that multiplies the penalty terms. Defaults to 1.0. \nSee the notes for the exact mathematical meaning of this parameter. \nalpha = 0 is equivalent to an ordinary least square, solved by the LinearRegression object. \nFor numerical reasons, using alpha = 0 with the Lasso object is not advised and you should prefer the LinearRegression object.'
    # l1_ratio
    l1_ratio = Float(0.5)
    l1_ratio_min = Float(0)
    l1_ratio_max = Float(1)
    l1_ratio_tooltip = 'The ElasticNet mixing parameter, with 0 <= l1_ratio <= 1. \nFor l1_ratio = 0 the penalty is an L2 penalty. \nFor l1_ratio = 1 it is an L1 penalty. \nFor 0 < l1_ratio < 1, the penalty is a combination of L1 and L2.'
    # fit_intercept
    fit_intercept = Bool(True)
    fit_intercept_tooltip = 'Whether the intercept should be estimated or not. \nIf False, the data is assumed to be already centered.'
    # normalize
    normalize = Bool(False)
    normalize_tooltip = 'If True, the regressors X will be normalized before regression.'
    # max_iter
    max_iter = Int(1000)
    max_iter_min = Int(1)
    max_iter_tooltip = 'The maximum number of iterations.'
    # copy_X
    copy_X = Bool(True)
    copy_X_tooltip = 'If True, X will be copied; else, it may be overwritten.'
    # tol
    tol = Float(0.0001)
    tol_min = Float(0)
    tol_tooltip = 'The tolerance for the optimization: if the updates are smaller than tol, \nthe optimization code checks the dual gap for optimality and continues until it is smaller than tol.'
    # warm_start
    warm_start = Bool(False)
    warm_start_tooltip = 'When set to True, reuse the solution of the previous call to fit as initialization, otherwise, just erase the previous solution.'
    # random_state
    random_state = Int(1)
    random_state_tooltip = 'The seed of the pseudo random number generator that selects a random feature to update. Useful only when selection is set to \'random\'.'
    # selection
    selection = Str('cyclic')
    selection_list = List(str, ['cyclic', 'random'])
    selection_tooltip = 'If set to \'random\', a random coefficient is updated every iteration rather than looping over features sequentially by default. \nThis (setting to\'random\') often leads to significantly faster convergence especially when tol is higher than 1e-4.'



class MultiTaskElasticNet_Model(ABCRegressionModel):


    calc_name = 'MultiTask Elastic Net'
    calc_desc = \
        'Multi-task ElasticNet model trained with L1/L2 mixed-norm as regularizer.'
    calc_docs = ABCRegressionModel.doc_root + 'MultiTaskElasticNet.html'


    def setInputs(self, dataframe):
        
        self.estimator_type = ElasticNet
        self.set_inputs(dataframe)
        self.uiModel = MultiTaskElasticNet_UI(
                            input_selector = self.input_selector.uiModel
                            )


    def getArgs(self):
        
        return {'alpha': self.uiModel.alpha,
                'l1_ratio': self.uiModel.l1_ratio,
                'fit_intercept': self.uiModel.fit_intercept,
                'normalize': self.uiModel.normalize,
                'max_iter': self.uiModel.max_iter,
                'copy_X': self.uiModel.copy_X,
                'tol': self.uiModel.tol,
                'warm_start': self.uiModel.warm_start,
                'random_state': self.uiModel.random_state,
                'selection': self.uiModel.selection}



enamldef MultiTaskElasticNet_View(GroupBox): me:

    attr model

    Notebook:

        Page:

            title = 'Inputs'
            closable = False

            InputsTargetsSelector_View:
                model := me.model.input_selector

        Page:

            title = 'Model'
            closable = False

            Form:

                Label:
                    text = 'Alpha'
                    tool_tip = model.alpha_tooltip
                FloatField:
                    value := model.alpha
                    minimum = model.alpha_min
                    tool_tip = me.model.alpha_tooltip

                Label:
                    text = 'L1 Ratio'
                    tool_tip = model.l1_ratio_tooltip
                FloatField:
                    value := model.l1_ratio
                    minimum = model.l1_ratio_min
                    maximum = model.l1_ratio_max
                    tool_tip = me.model.l1_ratio_tooltip

                Label:
                    text = 'Fit Intercept'
                    tool_tip = model.fit_intercept_tooltip
                CheckBox:
                    checked := model.fit_intercept
                    tool_tip = me.model.fit_intercept_tooltip

                Label:
                    text = 'Normalize'
                    tool_tip = model.normalize_tooltip
                CheckBox:
                    checked := model.normalize
                    tool_tip = me.model.normalize_tooltip

                Label:
                    text = 'Max Iter'
                    tool_tip = model.max_iter_tooltip
                IntField:
                    value := model.max_iter
                    minimum = model.max_iter_min
                    tool_tip = me.model.max_iter_tooltip

                Label:
                    text = 'Copy X'
                    tool_tip = model.copy_X_tooltip
                CheckBox:
                    checked := model.copy_X
                    tool_tip = me.model.copy_X_tooltip

                Label:
                    text = 'Tol'
                    tool_tip = model.tol_tooltip
                FloatField:
                    value := model.tol
                    minimum = model.tol_min
                    tool_tip = me.model.tol_tooltip

                Label:
                    text = 'Warm Start'
                    tool_tip = model.warm_start_tooltip
                CheckBox:
                    checked := model.warm_start
                    tool_tip = me.model.warm_start_tooltip

                Label:
                    text = 'Random State'
                    tool_tip = model.random_state_tooltip
                IntField:
                    value := model.random_state
                    tool_tip = me.model.random_state_tooltip

                Label:
                    text = 'Selection'
                    tool_tip = model.selection_tooltip
                ObjectCombo:
                    items = model.selection_list
                    selected := model.selection
                    tool_tip = me.model.selection_tooltip