# Atom
from atom.api import Atom, Bool, Float, Int, List, Str, Value

# Enaml
from enaml.widgets.api import CheckBox, Form, GroupBox, Label, Notebook, ObjectCombo, Page
from custom_views.fields import FloatField, IntField
from custom_views.InputsTargetsSelector import InputsTargetsSelector_View

# Models
from .._shared.CoresSelector import CoresSelector_Model
from .._shared.CoresSelector import CoresSelector_View
from ._base.classification_model import ABCClassificationModel
from sklearn.linear_model import PassiveAggressiveClassifier



class PassiveAggressiveClassifier_UI(Atom):

    # inputs_targets_selector
    input_selector = Value(Atom)

    # C
    C = Float(1)
    C_tooltip = 'Maximum step size (regularization). Defaults to 1.0.'
    # fit_intercept
    fit_intercept = Bool(True)
    fit_intercept_tooltip = (
        'Whether the intercept should be estimated or not. \n'
        'If False, the data is assumed to be already centered.\n'
        )
    # n_iter
    n_iter = Int(5)
    n_iter_min = Int(1)
    n_iter_tooltip = 'The number of passes over the training data (aka epochs). Defaults to 5.'
    # shuffle
    shuffle = Bool(True)
    shuffle_tooltip = 'Whether or not the training data should be shuffled after each epoch.'
    # verbose
    verbose = Bool(False)
    verbose_tooltip = 'The verbosity level.'
    # loss
    loss = Str('hinge')
    loss_list = List(str, ['hinge', 'squared_hinge'])
    loss_tooltip = (
        'The loss function to be used: \n'
        'hinge: equivalent to PA-I in the reference paper. \n'
        'squared_hinge: equivalent to PA-II in the reference paper.\n'
        )
    # random_state
    random_state = Int(1)
    random_state_tooltip = 'The seed of the pseudo random number generator to use when shuffling the data.'
    # warm_start
    warm_start = Bool(False)
    warm_start_tooltip = (
        'When set to True, reuse the solution of the previous call to fit as initialization.\n'
        'Otherwise, just erase the previous solution.\n'
        )
    # class_weight
    class_weight = Str('equal')
    class_weight_list = List(str, ['equal', 'balanced'])
    class_weight_tooltip = (
        'Preset for the class_weight fit parameter.\n'
        'Weights associated with classes. If not given, all classes are supposed to have weight one.\n'
        'The "balanced" mode uses the values of y to automatically adjust weights inversely proportional to class frequencies in the input data as n_samples / (n_classes * np.bincount(y))\n'
        'New in version 0.17: parameter class_weight to automatically weight samples.\n'
        )
    # cores_selector
    cores_selector = Value(Atom)


class PassiveAggressiveClassifier_Model(ABCClassificationModel):


    calc_name = 'Passive Aggressive Classifier'
    calc_desc = 'Passive Aggressive Classifier.'
    calc_docs = \
        ABCClassificationModel.doc_root + 'PassiveAggressiveClassifier.html'


    def setInputs(self, dataframe):
        
        self.estimator_type = PassiveAggressiveClassifier
        self.set_inputs(dataframe)
        self.cores_selector = CoresSelector_Model()
        self.uiModel = PassiveAggressiveClassifier_UI(
                            input_selector = self.input_selector.uiModel,
                            cores_selector = self.cores_selector.uiModel
                            )


    def getArgs(self):
        
        return {'C': self.uiModel.C,
                'fit_intercept': self.uiModel.fit_intercept,
                'n_iter': self.uiModel.n_iter,
                'shuffle': self.uiModel.shuffle,
                'verbose': self.uiModel.verbose,
                'loss': self.uiModel.loss,
                'random_state': self.uiModel.random_state,
                'warm_start': self.uiModel.warm_start,
                'class_weight': ('auto'
                                 if self.uiModel.class_weight == 'balanced'
                                 else None),
                'n_jobs': self.cores_selector.number_of_cores()}



enamldef PassiveAggressiveClassifier_View(GroupBox): me:

    attr model

    Notebook:

        Page:

            title = 'Inputs'
            closable = False

            InputsTargetsSelector_View:
                model = me.model.input_selector

        Page:

            title = 'Model'
            closable = False

            Form:

                Label:
                    text = 'C'
                    tool_tip = model.C_tooltip
                FloatField:
                    value := model.C
                    tool_tip = me.model.C_tooltip

                Label:
                    text = 'Fit Intercept'
                    tool_tip = model.fit_intercept_tooltip
                CheckBox:
                    checked := model.fit_intercept
                    tool_tip = me.model.fit_intercept_tooltip

                Label:
                    text = 'N Iter'
                    tool_tip = model.n_iter_tooltip
                IntField:
                    value := model.n_iter
                    minimum = model.n_iter_min
                    tool_tip = me.model.n_iter_tooltip

                Label:
                    text = 'Shuffle'
                    tool_tip = model.shuffle_tooltip
                CheckBox:
                    checked := model.shuffle
                    tool_tip = me.model.shuffle_tooltip

                Label:
                    text = 'Verbose'
                    tool_tip = model.verbose_tooltip
                CheckBox:
                    checked := model.verbose
                    tool_tip = me.model.verbose_tooltip

                Label:
                    text = 'Loss'
                    tool_tip = model.loss_tooltip
                ObjectCombo:
                    items = model.loss_list
                    selected := model.loss
                    tool_tip = me.model.loss_tooltip

                Label:
                    text = 'Random State'
                    tool_tip = model.random_state_tooltip
                IntField:
                    value := model.random_state
                    tool_tip = me.model.random_state_tooltip

                Label:
                    text = 'Warm Start'
                    tool_tip = model.warm_start_tooltip
                CheckBox:
                    checked := model.warm_start
                    tool_tip = me.model.warm_start_tooltip

                Label:
                    text = 'Class Weight'
                    tool_tip = model.class_weight_tooltip
                ObjectCombo:
                    items = model.class_weight_list
                    selected := model.class_weight
                    tool_tip = me.model.class_weight_tooltip
                
                CoresSelector_View:
                    model = me.model.cores_selector