# Atom
from atom.api import Atom, Bool, Float, Int, List, Str, Unicode, Value

# Enaml
from enaml.core.api import Conditional
from enaml.widgets.api import (
    CheckBox, Form, GroupBox, Label, Notebook, ObjectCombo, Page, SpinBox)
from custom_views.fields import IntField, FloatField

# Models
from custom_views.CheckBoxList import CheckBoxList_Model, CheckBoxList_View
from custom_views.InputsTargetsSelector import InputsTargetsSelector_Model
from custom_views.InputsTargetsSelector import InputsTargetsSelector_View
from .._shared.CoresSelector import CoresSelector_Model
from .._shared.CoresSelector import CoresSelector_View

# Other
from ._base.classification_model import ABCClassificationModel
from sklearn.linear_model import Perceptron

from pandas import DataFrame, Series



class Perceptron_UI(Atom):

    # inputs_targets_selector
    input_selector = Value(Atom)
    
    # penalty
    penalty = Str()
    penalty_list = List(str, ['l1', 'l2', 'elasticnet'])
    use_penalty = Bool()
    penalty_tooltip = 'The penalty (aka regularization term) to be used.'
    # alpha
    alpha = Float(0.0001)
    alpha_tooltip = 'Constant that multiplies the regularization term if regularization is used.'
    # fit_intercept
    fit_intercept = Bool(True)
    fit_intercept_tooltip = 'Whether the intercept should be estimated or not. If False, the data is assumed to be already centered.'
    # n_iter
    n_iter = Int(5)
    n_iter_min = Int(1)
    n_iter_tooltip = 'The number of passes over the training data (aka epochs).'
    # shuffle
    shuffle = Bool(True)
    shuffle_tooltip = 'Whether or not the training data should be shuffled after each epoch.'
    # random_state
    random_state = Int(1)
    random_state_tooltip = 'The seed of the pseudo random number generator to use when shuffling the data.'
    # eta0
    eta0 = Float(True)
    eta0_tooltip = 'Constant by which the updates are multiplied.'
    # warm_start
    warm_start = Bool(False)
    warm_start_tooltip = 'When set to True, reuse the solution of the previous call to fit as initialization, otherwise, just erase the previous solution.'
    # class_weight_type
    class_weight_type = Str('equal')
    class_weight_type_list = List(str, ['equal', 'balanced'])
    class_weight_type_tooltip = (
        'Preset for the class_weight fit parameter.\n'
        'Weights associated with classes. If not given, all classes are supposed to have weight one.\n'
        'The "balanced" mode uses the values of y to automatically adjust weights inversely proportional to class frequencies in the input data as n_samples / (n_classes * np.bincount(y))\n'
        'New in version 0.17: parameter class_weight to automatically weight samples.'
        )
    # cores_selector
    cores_selector = Value(Atom)



class Perceptron_Model(ABCClassificationModel):


    calc_name = 'Perceptron'


    def setInputs(self, dataframe):

        self.estimator_type = Perceptron
        self.set_inputs(dataframe)
        self.cores_selector = CoresSelector_Model()
        self.uiModel = Perceptron_UI(
                            input_selector = self.input_selector.uiModel,
                            cores_selector = self.cores_selector.uiModel
                            )


    def getArgs(self):

        return {
            'penalty': (None 
                        if not self.uiModel.use_penalty 
                        else self.uiModel.penalty),
            'alpha': self.uiModel.alpha,
            'fit_intercept': self.uiModel.fit_intercept,
            'n_iter': self.uiModel.n_iter,
            'shuffle': self.uiModel.shuffle,
            'random_state': self.uiModel.random_state,
            'eta0': self.uiModel.eta0,
            'warm_start': self.uiModel.warm_start,
            'class_weight': ('balanced'
                             if self.uiModel.class_weight_type == 'balanced'
                             else None),
            'n_jobs': self.cores_selector.number_of_cores()
            }



enamldef Perceptron_View(GroupBox): me:

    attr model

    Notebook:
        
        Page:

            title = 'Inputs'
            closable = False

            InputsTargetsSelector_View:
                model = me.model.input_selector

        Page:

            title = 'Model'
            closable = False

            Form:

                CheckBox:
                    tool_tip = model.penalty_tooltip
                    text = 'Penalty'
                    checked := model.use_penalty
                Label:
                    text = 'N/A'
                    visible << not model.use_penalty
                ObjectCombo:
                    items = model.penalty_list
                    selected := model.penalty
                    visible << model.use_penalty
                    tool_tip = me.model.penalty_tooltip

                Label:
                    text = 'Alpha'
                    tool_tip = model.alpha_tooltip
                FloatField:
                    value := model.alpha
                    tool_tip = me.model.alpha_tooltip

                Label:
                    text = 'Fit Intercept'
                    tool_tip = model.fit_intercept_tooltip
                CheckBox:
                    checked := model.fit_intercept
                    tool_tip = me.model.fit_intercept_tooltip

                Label:
                    text = 'N Iter'
                    tool_tip = model.n_iter_tooltip
                IntField:
                    value := model.n_iter
                    minimum = model.n_iter_min
                    tool_tip = me.model.n_iter_tooltip

                Label:
                    text = 'Shuffle'
                    tool_tip = model.shuffle_tooltip
                CheckBox:
                    checked := model.shuffle
                    tool_tip = me.model.shuffle_tooltip

                Label:
                    text = 'Random State'
                    tool_tip = model.random_state_tooltip
                IntField:
                    value := model.random_state
                    tool_tip = me.model.random_state_tooltip

                Label:
                    text = 'Eta0'
                    tool_tip = model.eta0_tooltip
                FloatField:
                    value := model.eta0
                    tool_tip = me.model.eta0_tooltip

                Label:
                    text = 'Warm Start'
                    tool_tip = model.warm_start_tooltip
                CheckBox:
                    checked := model.warm_start
                    tool_tip = me.model.warm_start_tooltip

                Label:
                    text = 'Class Weight Type'
                    tool_tip = model.class_weight_type_tooltip
                ObjectCombo:
                    items = model.class_weight_type_list
                    selected := model.class_weight_type
                    tool_tip = me.model.class_weight_type_tooltip

                CoresSelector_View:
                    model = me.model.cores_selector