# Atom
from atom.api import Atom, Bool, Float, Int, List, Str, Value

# Enaml
from enaml.core.api import Conditional
from enaml.widgets.api import (
    CheckBox, Form, GroupBox, Label, Notebook, ObjectCombo, Page, SpinBox
    )
from custom_views.fields import FloatField, IntField
from custom_views.InputsTargetsSelector import InputsTargetsSelector_Model
from custom_views.InputsTargetsSelector import InputsTargetsSelector_View
from custom_views.CheckBoxList import CheckBoxList_Model, CheckBoxList_View
from .._shared.CoresSelector import CoresSelector_Model
from .._shared.CoresSelector import CoresSelector_View
from ._subviews.Leaves import Leaves_Model, Leaves_View
from ._subviews.BootstrapOOB import BootstrapOOB_Model, BootstrapOOB_View

# Models
from ..sklearn_element import SKLearnElement

# Other
from sklearn.ensemble import RandomForestClassifier
from numpy import int64, float64
from pandas import Series, DataFrame
from .._metrics.classification_metrics import ClassificationMetrics as CM



class RandomForestClassifier_UI(Atom):

    # inputs_targets_selector
    inputs_targets_selector = Value(Atom)
        
    # number of trees
    number_of_trees = Int(10)
    # criterion
    criterion = Str('gini')
    criterion_list = List(str, ['gini', 'entropy'])
    # max_features_type
    max_features_type = Str('sqrt')
    max_features_type_list = List(str, ['sqrt', 'log2', 'all', 
                                        'int', 'percentage'])
    # max_features_int
    max_features_int = Int(10)
    # max_features_percentage
    max_features_percentage = Int(50)
    max_features_percentage_min = Int(1)
    max_features_percentage_max = Int(100)        
    # leaves
    leaves = Value(Atom)
    # bootstrapOOB
    bootstrapOOB = Value(Atom)
    # random_state_seed
    random_state_seed = Int(1)
    # verbose
    verbose = Bool(False)
    # warm_start
    warm_start = Bool(False)
    # class_weight
    class_weight = Str('equal')
    class_weight_list = List(str, ['equal', 'balanced', 
                                   'balanced_subsample'])
    # cores_selector
    cores_selector = Value(Atom)


class RandomForestClassifier_Model(SKLearnElement):

    calc_name = 'Random Forest Classifier'
    calc_desc = 'A random forest classifier.'
    calc_docs = SKLearnElement.doc_root + \
                           'sklearn.ensemble.RandomForestClassifier.html'


    def setInputs(self, dataframe):

        self._dataframe = dataframe
        self.selector = InputsTargetsSelector_Model(
                                dataframe,
                                input_dtypes = [float64, int64, str, object]
                                )
        self.cores_selector = CoresSelector_Model()
        self.leaves = Leaves_Model()
        self.bootstrapOOB = BootstrapOOB_Model()
        self.uiModel = RandomForestClassifier_UI(
                            inputs_targets_selector = self.selector.uiModel,
                            cores_selector = self.cores_selector.uiModel,
                            leaves = self.leaves.uiModel,
                            bootstrapOOB = self.bootstrapOOB.uiModel
                            )


    def getOutputs(self):

        try:

            # Assign local variables
            input_columns = self.selector.checked_inputs()
            target_column = self.selector.selected_target()
            number_of_trees = self.uiModel.number_of_trees
            criterion = self.uiModel.criterion
            max_features_type = self.uiModel.max_features_type
            max_features = {'sqrt': 'sqrt',
                            'log2': 'log2',
                            'all': None,
                            'int' : self.uiModel.max_features_int,
                            'percentage':self.uiModel.max_features_percentage
                            }[max_features_type]
                            
            max_leaf_nodes = self.leaves.max_leaf_nodes()
            max_depth = self.leaves.max_depth()
            min_split_samples = self.leaves.min_split_samples()
            min_leaf_samples = self.leaves.min_leaf_samples()
            min_leaf_weighted_fraction = \
                self.leaves.min_leaf_weighted_fraction()
            bootstrap = self.bootstrapOOB.bootstrap()
            out_of_bag_scoring = self.bootstrapOOB.out_of_bag_scoring()
            random_state_seed = self.uiModel.random_state_seed
            verbose = self.uiModel.verbose
            warm_start = self.uiModel.warm_start
            class_weight = self.uiModel.class_weight
            number_of_cores = self.cores_selector.number_of_cores()
    
            # Validate inputs
            if not self.selector.validate_inputs():
                return {'Outputs': 'No Outputs'}
                
            # Build model
            ranfor = RandomForestClassifier(
                        n_estimators = number_of_trees,
                        criterion = criterion,
                        max_features = max_features,
                        min_samples_split = min_split_samples,
                        min_samples_leaf = min_leaf_samples,
                        min_weight_fraction_leaf = min_leaf_weighted_fraction,
                        bootstrap = bootstrap,
                        oob_score = out_of_bag_scoring,
                        n_jobs = number_of_cores,
                        random_state = random_state_seed,
                        verbose = verbose,
                        warm_start = warm_start)
            
            # Split into training and test set        
            X_train, y_train, X_test, y_test = \
                self.selector.get_training_test_data()
    
            # Train the model using the training set and make predictions
            ranfor.fit(X_train, y_train)
            y_pred_test = Series(ranfor.predict(X_test), 
                                 index = X_test.index)
            y_pred_proba = DataFrame(
                                 ranfor.predict_proba(X_test),
                                 index = X_test.index,
                                 columns = self.selector.get_unique_targets())

            # Create outputs
            attrs = {'estimators': ranfor.estimators_,
                     'classes': ranfor.classes_,
                     '# classes': ranfor.n_classes_,
                     '# features': ranfor.n_features_,
                     '# outputs': ranfor.n_outputs_,
                     'feature importances': Series(ranfor.feature_importances_,
                                                   name = 'Feature Importance',
                                                   index = input_columns)}
            
            if out_of_bag_scoring:
                attrs['out of bag score'] = ranfor.oob_score_
                attrs['out of bag decision function'] = \
                    ranfor.oob_decision_function_
            
            outputs = {'Attributes': attrs}
            outputs['Metrics'] = CM.get_metrics(
                    y_true = y_test, 
                    y_pred = y_pred_test,
                    y_proba = y_pred_proba,
                    classification_type = self.selector.get_problem_type(),
                    classes = ranfor.classes_
                    )
    
            return outputs
            
        except Exception as e:
            
            return self.standard_exception(e) 



enamldef RandomForestClassifier_View(GroupBox): me:

    attr model
    
    Notebook:
        
        Page:

            title = 'Inputs'
            closable = False

            InputsTargetsSelector_View:
                model = me.model.inputs_targets_selector

        Page:
            
            title = 'General'
            closable = False            
            
            Form:
                
                Label:
                    text = 'Number of trees'
                IntField:
                    value := model.number_of_trees
        
                Label:
                    text = 'Criterion'
                ObjectCombo:
                    items = model.criterion_list
                    selected := model.criterion
        
                Label:
                    text = 'Max Features Type'
                ObjectCombo:
                    items = model.max_features_type_list
                    selected := model.max_features_type
        
                Conditional:
                    condition << model.max_features_type == 'int'
                    Label:
                        text = 'Max Features Int'
                    IntField:
                        value := model.max_features_int
                    
                Label:
                    text = 'Max Features Percentage'
                SpinBox:
                    minimum = model.max_features_percentage_min
                    maximum = model.max_features_percentage_max
                    value := model.max_features_percentage
        
                Label:
                    text = 'Random State Seed'
                IntField:
                    value := model.random_state_seed
        
                Label:
                    text = 'Verbose'
                CheckBox:
                    checked := model.verbose
        
                Label:
                    text = 'Warm Start'
                CheckBox:
                    checked := model.warm_start
        
                Label:
                    text = 'Class Weight'
                ObjectCombo:
                    items = model.class_weight_list
                    selected := model.class_weight
        
                CoresSelector_View:
                    model = me.model.cores_selector

        Page:
            
            title = 'Bootstrapping'
            closable = False
            
            BootstrapOOB_View:
                model = me.model.bootstrapOOB            

        Page:
            
            title = 'Leaves'
            closable = False   

            Leaves_View:
                model = me.model.leaves
                