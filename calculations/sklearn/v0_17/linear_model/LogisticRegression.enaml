# Atom
from atom.api import Atom, Bool, Float, Int, List, Unicode, Value

# Enaml
from enaml.core.api import Conditional
from enaml.widgets.api import (
    CheckBox, Form, GroupBox, Label, Notebook, ObjectCombo, Page, SpinBox)
from custom_views.fields import IntField, FloatField

# Models
from custom_views.CheckBoxList import CheckBoxList_Model, CheckBoxList_View
from custom_views.InputsTargetsSelector import InputsTargetsSelector_Model
from custom_views.InputsTargetsSelector import InputsTargetsSelector_View
from ..shared.CoresSelector import CoresSelector_Model
from ..shared.CoresSelector import CoresSelector_View

# Other
from ._base.classification_model import ABCClassificationModel
from sklearn.linear_model import LogisticRegression

from pandas import DataFrame, Series



class LogisticRegression_UI(Atom):

    # inputs_targets_selector
    input_selector = Value(Atom)
        
    # solver
    solver = Unicode('liblinear')
    solver_list = List(str, ['newton-cg', 'lbfgs', 'liblinear', 'sag'])
    # penalty
    penalty = Unicode('l2')
    penalty_list = List(str, ['l1', 'l2'])
    # dual
    dual = Bool(False)
    # tolerance
    tolerance = Float(0.0001)
    # C
    C = Float(True)
    # fit_intercept
    fit_intercept = Bool(True)
    # intercept_scaling
    intercept_scaling = Float(True)
    # class_weight_type
    class_weight_type = Unicode('equal')
    class_weight_type_list = List(str, ['equal', 'balanced'])
    # max_iterations
    max_iterations = Int(100)
    # multi_class
    multi_class = Unicode('ovr')
    multi_class_list = List(str, ['ovr', 'multinomial'])
    # random_state_seed
    random_state_seed = Int(1)
    # verbose
    verbose = Bool(False)
    # warm_start
    warm_start = Bool(False)
    # cores_selector
    cores_selector = Value(Atom)
        

class LogisticRegression_Model(ABCClassificationModel):


    calc_name = 'Logistic Regression'
    calc_desc = 'Logistic Regression (aka logit, MaxEnt) classifier.'
    calc_docs = \
        ABCClassificationModel.doc_root + 'LogisticRegression.html'


    def setInputs(self, dataframe):

        self.estimator_type = LogisticRegression
        self.set_inputs(dataframe)
        self.cores_selector = CoresSelector_Model()
        self.uiModel = LogisticRegression_UI(
                            input_selector = self.input_selector.uiModel,
                            cores_selector = self.cores_selector.uiModel
                            )


    def getArgs(self):
        
        return {'solver': self.uiModel.solver,
                'penalty': ('l2' 
                            if self.uiModel.solver in ('newton-cg', 
                                                       'lbfgs')
                            else self.uiModel.penalty),
                'dual': (self.uiModel.dual
                         if (self.uiModel.penalty == 'l2' and 
                             self.uiModel.solver == 'liblinear')
                         else None),
                'tol': self.uiModel.tolerance,
                'C': self.uiModel.C,
                'fit_intercept': self.uiModel.fit_intercept,
                'intercept_scaling': (self.uiModel.intercept_scaling
                                      if self.uiModel.fit_intercept
                                      else None),
                'class_weight': ('balanced'
                                 if self.uiModel.class_weight_type == 'balanced'
                                 else None),
                'max_iter': self.uiModel.max_iterations,
                'multi_class': (self.uiModel.multi_class
                                if self.uiModel.solver == 'lbfgs'
                                else 'ovr'),
                'random_state': self.uiModel.random_state_seed,
                'verbose': self.uiModel.verbose,
                'warm_start': (self.uiModel.warm_start
                               if self.uiModel.solver != 'liblinear'
                               else None),
                'n_jobs': self.cores_selector.number_of_cores()}



enamldef LogisticRegression_View(GroupBox): me:

    attr model

    Notebook:

        Page:

            title = 'Inputs'
            closable = False

            InputsTargetsSelector_View:
                model = me.model.input_selector

        Page:

            title = 'Model'
            closable = False

            Form:

                Label:
                    text = 'Solver'
                ObjectCombo:
                    items = model.solver_list
                    selected := model.solver

                Conditional:
                    condition << model.solver == 'liblinear'
                    Label:
                        text = 'Penalty'
                    ObjectCombo:
                        items = model.penalty_list
                        selected := model.penalty

                Conditional:
                    condition << model.penalty == 'l2' and model.solver == 'liblinear'
                    Label:
                        text = 'Dual'
                    CheckBox:
                        checked := model.dual

                Label:
                    text = 'Tolerance'
                FloatField:
                    value := model.tolerance

                Label:
                    text = 'C'
                FloatField:
                    value := model.C

                Label:
                    text = 'Fit Intercept'
                CheckBox:
                    checked := model.fit_intercept

                Conditional:
                    condition << model.fit_intercept == True and model.solver == 'liblinear'
                    Label:
                        text = 'Intercept Scaling'
                    FloatField:
                        value := model.intercept_scaling

                Label:
                    text = 'Class Weight Type'
                ObjectCombo:
                    items = model.class_weight_type_list
                    selected := model.class_weight_type

                Conditional:
                    condition << model.solver in ('newton-cg', 'sag', 'lbfgs')
                    Label:
                        text = 'Max Iterations'
                    IntField:
                        value := model.max_iterations

                Conditional:
                    condition << model.solver == 'lbfgs'
                    Label:
                        text = 'Multi Class'
                    ObjectCombo:
                        items = model.multi_class_list
                        selected := model.multi_class
    
                Label:
                    text = 'Random State Seed'
                IntField:
                    value := model.random_state_seed

                Label:
                    text = 'Verbose'
                CheckBox:
                    checked := model.verbose

                Label:
                    text = 'Warm Start'
                CheckBox:
                    checked := model.warm_start

                CoresSelector_View:
                    model = me.model.cores_selector