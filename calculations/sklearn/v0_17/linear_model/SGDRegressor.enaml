# Atom
from atom.api import Atom, Bool, Float, Int, List, Str, Value

# Enaml
from enaml.widgets.api import (
    CheckBox, Form, GroupBox, Label, Notebook, ObjectCombo, Page
    )
from enaml.core.api import Conditional
from custom_views.fields import FloatField, IntField
from custom_views.InputsTargetsSelector import InputsTargetsSelector_View

# Models
from ._base.regression_model import ABCRegressionModel
from .._shared.CoresSelector import CoresSelector_Model
from .._shared.CoresSelector import CoresSelector_View
from sklearn.linear_model import SGDRegressor



class SGDRegressor_UI(Atom):

    input_selector = Value(Atom)

    # loss
    loss = Str('squared_loss')
    loss_list = List(str, ['squared_loss', 'huber', 'epsilon_insensitive', 
                           'squared_epsilon_insensitive'])
    # penalty
    penalty = Str('l2')
    penalty_list = List(str, ['none', 'l1', 'l2', 'elasticnet'])
    # alpha
    alpha = Float(0.0001)
    # l1_ratio
    l1_ratio = Float(0.15)
    l1_ratio_min = Float(0)
    l1_ratio_max = Float(1)
    # fit_intercept
    fit_intercept = Bool(True)
    # n_iter
    n_iter = Int(5)
    # shuffle
    shuffle = Bool(True)
    # verbose
    verbose = Bool(False)
    # epsilon
    epsilon = Float(0.1)
    # random_state
    random_state = Int(1)
    # learning_rate
    learning_rate = Str('invscaling')
    learning_rate_list = List(str, ['constant', 'invscaling', 'optimal'])
    # eta0
    eta0 = Float(0.01)
    # power_t
    power_t = Float(0.25)
    # warm_start
    warm_start = Bool(False)
    # average
    average_type = Str('bool')
    average_type_list = List(str, ['bool', 'int'])
    average_bool = Bool(False)
    average_int = Int(10)
    average_int_min = Int(2)
        

class SGDRegressor_Model(ABCRegressionModel):


    calc_name = 'SGD Regressor'
    calc_desc = \
    'Linear model fitted by minimizing a regularized empirical loss with SGD.'
    calc_docs = ABCRegressionModel.doc_root + 'SGDRegressor.html'


    def setInputs(self, dataframe):
        
        self.estimator_type = SGDRegressor
        self.set_inputs(dataframe)
        self.cores_selector = CoresSelector_Model()
        self.uiModel = SGDRegressor_UI(
                            input_selector = self.input_selector.uiModel,
                            )


    def getArgs(self):
        
        return {'loss': self.uiModel.loss,
                'penalty': self.uiModel.penalty,
                'alpha': self.uiModel.alpha,
                'l1_ratio': self.uiModel.l1_ratio,
                'fit_intercept': self.uiModel.fit_intercept,
                'n_iter': self.uiModel.n_iter,
                'shuffle': self.uiModel.shuffle,
                'verbose': self.uiModel.verbose,
                'epsilon': (self.uiModel.epsilon 
                            if self.uiModel.loss in 
                            ('huber', 'epsilon_insensitive', 
                             'squared_epsilon_insensitive')
                            else None),
                'random_state': self.uiModel.random_state,
                'learning_rate': self.uiModel.learning_rate,
                'eta0': self.uiModel.eta0,
                'power_t': self.uiModel.power_t,
                'warm_start': self.uiModel.warm_start,
                'average': (self.uiModel.average_bool 
                            if self.uiModel.average_type == 'bool'
                            else self.uiModel.average_int)}



enamldef SGDRegressor_View(GroupBox): me:

    attr model

    Notebook:
        
        Page:

            title = 'Inputs'
            closable = False

            InputsTargetsSelector_View:
                model := me.model.input_selector

        Page:

            title = 'Model'
            closable = False

            Form:

                Label:
                    text = 'Loss'
                ObjectCombo:
                    items = model.loss_list
                    selected := model.loss

                Label:
                    text = 'Penalty'
                ObjectCombo:
                    items = model.penalty_list
                    selected := model.penalty

                Label:
                    text = 'Alpha'
                FloatField:
                    value := model.alpha

                Label:
                    text = 'L1 Ratio'
                FloatField:
                    value := model.l1_ratio
                    minimum = model.l1_ratio_min
                    maximum = model.l1_ratio_max

                Label:
                    text = 'Fit Intercept'
                CheckBox:
                    checked := model.fit_intercept

                Label:
                    text = 'N Iter'
                IntField:
                    value := model.n_iter

                Label:
                    text = 'Shuffle'
                CheckBox:
                    checked := model.shuffle

                Label:
                    text = 'Verbose'
                CheckBox:
                    checked := model.verbose

                Conditional:
                    condition << model.loss in ('huber', 'epsilon_insensitive', 
                                                'squared_epsilon_insensitive')
                    Label:
                        text = 'Epsilon'
                    FloatField:
                        value := model.epsilon
    

                Label:
                    text = 'Random State'
                IntField:
                    value := model.random_state

                Label:
                    text = 'Learning Rate'
                ObjectCombo:
                    items = model.learning_rate_list
                    selected := model.learning_rate

                Label:
                    text = 'Eta0'
                FloatField:
                    value := model.eta0

                Label:
                    text = 'Power T'
                FloatField:
                    value := model.power_t

                Label:
                    text = 'Warm Start'
                CheckBox:
                    checked := model.warm_start

                Label:
                    text = 'Average Type'
                ObjectCombo:
                    items = model.average_type_list
                    selected := model.average_type

                Conditional:
                    condition << model.average_type == 'bool'
                    Label:
                        text = 'Average Bool'
                    CheckBox:
                        checked := model.average_bool
    

                Conditional:
                    condition << model.average_type == 'int'
                    Label:
                        text = 'Average Int'
                    IntField:
                        value := model.average_int
                        minimum = model.average_int_min