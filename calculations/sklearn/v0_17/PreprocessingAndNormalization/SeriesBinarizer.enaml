# Atom
from atom.api import Atom, Float, List, Str, Value

# Enaml
from enaml.core.api import Conditional
from enaml.widgets.api import Form, GroupBox, Label, Notebook, ObjectCombo, Page
from custom_views.fields import FloatField
from custom_views.CheckBoxList import CheckBoxList_Model, CheckBoxList_View
from custom_views.CheckBoxFloatFieldList import CheckBoxFloatFieldList_Model, CheckBoxFloatFieldList_View

# Models
from calculations._core.ABCs import ABCSeriesToSeries
from sklearn.preprocessing import Binarizer
from pandas import Series



class SeriesBinarizer_UI(Atom):

    # threshold
    threshold = Float(0)
    threshold_tooltip = (
        'Feature values below or equal to this are replaced by 0, above it by 1.\n'
        'Threshold may not be less than 0 for operations on sparse matrices.\n'
        )



class SeriesBinarizer_Model(ABCSeriesToSeries):


    calc_name = 'Binarizer'


    def setInputs(self, series):

        self._series = series
        self.uiModel = SeriesBinarizer_UI()


    def getOutputs(self):

        try:
            
            b = Binarizer(self.uiModel.threshold)
            binarized = b.fit_transform(self._series.reshape(-1, 1)).squeeze()
            series = Series(binarized,
                            index = self._series.index,
                            name = (self._series.index.name + '_binarized'
                                    if self._series.index.name:
                                    else 'binarized'))

            return {'series': series}

        except Exception as e:

            return self.standard_exception(e)



enamldef SeriesBinarizer_View(GroupBox): me:

    attr model

    Form:

        Label:
            text = 'Threshold'
            tool_tip = model.threshold_tooltip
        FloatField:
            value := model.threshold
            tool_tip = me.model.threshold_tooltip