# Enaml
from enaml.widgets.api import Container, Html, MPLCanvas
from enaml.core.api import Conditional

# Plotting                             
from matplotlib.figure import Figure
import matplotlib.pyplot as plt
from matplotlib.markers import MarkerStyle
from plotFunctions import getFigureShape
import seaborn as sns
markers = MarkerStyle.filled_markers

# Numerical
from numpy import int32, int64, float64
from pandas import melt


def getDataFrameHtml(dataframe):

    # Create table
    source = '<table border = "3">'
    
    # Create header row
    source += '<thead><tr>'
    if dataframe.index.name:
        source += '<th>%s</th>' % str(dataframe.index.name)
    else:
        source += '<th></th>'
    for col in dataframe.columns:
        source += '<th>%s</th>' % col
    
    # Close header row
    source += '</tr></thead>'
    
    # Create rows
    source += '<tbody>'
    for ix in dataframe.index:
        # Create row
        source += '<tr>'
        # Add index value
        source += '<th>%s</th>' % str(ix)
        # Add data values
        for col in dataframe.columns:
            source += '<td>%s</td>' % str(dataframe.get_value(ix, col))
        # Close row
        source += '</tr>'
    source += '</tbody>'
    
    # Close table tag
    source += '</table>'

    return source



def getDataFrameFigure(dataframe):
    
    fig = Figure()
    ax = fig.add_subplot(111)

    categorical = dataframe.select_dtypes([object])
    numeric = dataframe.select_dtypes(['number'])
    nnc = len(numeric.columns)
    ncc = len(categorical.columns)
    nic = list(dataframe.dtypes).count(int64)
    nfc = list(dataframe.dtypes).count(float64)
    
    # all columns are dtype == int -> confusion matrix
    if (len(set(dataframe.dtypes)) == 1 and 
        dataframe.dtypes[0] in (int32, int64)):
            
        sns.heatmap(dataframe,
                    annot = True, square = True,
                    fmt = 'd', ax = ax)
        ax.set_xlim([0, len(dataframe.columns)])
        ax.set_xlabel('Predicted')
        ax.set_ylabel('Actual')
        
        return fig
    
    # Categorised confusion matrices (by category in 3rd column)
    elif nnc == 0 and ncc == 3:
        
        if sorted(dataframe[dataframe.columns[0]].unique()) == \
           sorted(dataframe[dataframe.columns[1]].unique()):
               
           fig = Figure()
           col0 = dataframe.columns[0]
           col1 = dataframe.columns[1]
           axis_col = dataframe.columns[2]
           axis_names = list(dataframe[axis_col].unique())
           r, c = getFigureShape(len(axis_names))
           i_ax = 0
           for a in axis_names:
               i_ax += 1
               ax = fig.add_subplot(r, c, i_ax)
               ax.set_title(a)
               sub_df = dataframe[dataframe[axis_col] == a]
               conf_mat = confusion_matrix(sub_df[col0], sub_df[col1])
               sns.heatmap(conf_mat,
                           annot = True, square = True,
                           fmt = 'd', ax = ax)
               ax.legend()
               
           return fig
                   
            

    elif nnc == 1 and ncc == 0:
        
        sns.distplot(dataframe, ax = ax)
        
        return fig
        
    elif nnc == 1 and ncc == 1:
        
        sns.boxplot(data = dataframe, ax = ax,
                    x = categorical.columns[0], y = numeric.columns[0])
        
        return fig

    elif nnc == 2 and ncc == 0:
            
        sns.regplot(data = dataframe, fit_reg = False, ax = ax,
                    x = numeric.columns[0], y = numeric.columns[1])
        
        return fig
                        
    elif nnc == 2 and ncc == 1:
            
        cat_col = categorical.columns[0]
        cat_col_values = categorical[cat_col].unique()
        for cat_col_value in cat_col_values:
            sub_df = dataframe[dataframe[cat_col] ==  cat_col_value]
            sns.regplot(data = sub_df, fit_reg = False, ax = ax,
                        x = numeric.columns[0], y = numeric.columns[1], 
                        label = cat_col_value)
            ax.legend()
        
        return fig
        
    elif nnc == 2 and ncc == 2:
            
        colour_col = categorical.columns[0]
        marker_col = categorical.columns[1]
        colour_labels = sorted(categorical[colour_col].unique())
        marker_labels = sorted(categorical[marker_col].unique())
        palette = sns.color_palette('cubehelix', len(colour_labels))

        for m in marker_labels:
            for c in colour_labels:
                sub_df = dataframe[(dataframe[marker_col] == m) &
                                      (dataframe[colour_col] == c)]
                
                sns.regplot(
                        data = sub_df, fit_reg = False, ax = ax,
                        x = numeric.columns[0], y = numeric.columns[1], 
                        color = palette[colour_labels.index(c)],
                        marker = markers[marker_labels.index(m)],
                        label = '%s - %s' % (m, c))
        ax.legend()
        
        return fig
            
    elif nnc == 2 and ncc == 3:
            
        colour_col = categorical.columns[0]
        marker_col = categorical.columns[1]
        axis_col = categorical.columns[2]
        colour_labels = sorted(categorical[colour_col].unique())
        marker_labels = sorted(categorical[marker_col].unique())
        axis_labels = sorted(categorical[axis_col].unique())
        palette = sns.color_palette('cubehelix', len(colour_labels))

        fig = Figure()
        fig_nrows, fig_ncols = getFigureShape(len(axis_labels))
        
        i_ax = 0
        for a in axis_labels:
            i_ax += 1
            ax = fig.add_subplot(fig_nrows, fig_ncols, i_ax)
            ax.set_title(a)
            for m in marker_labels:
                for c in colour_labels:
                    sub_df = dataframe[(dataframe[axis_col] == a) &
                                          (dataframe[marker_col] == m) &
                                          (dataframe[colour_col] == c)]
                    sns.regplot(
                            data = sub_df, fit_reg = False, ax = ax,
                            x = numeric.columns[0], y = numeric.columns[1], 
                            color = palette[colour_labels.index(c)],
                            marker = markers[marker_labels.index(m)],
                            label = '%s - %s' % (m, c))
            ax.legend()
            
            return fig

    elif nnc == 3 and ncc == 0:
        
        if nic == 2 and nfc == 1:
            # Try matrix plot
            return None
    
    elif nnc == 3 and  ncc == 1:
            # try a colour scatter plot with discrete colour blend for each
            # category - will only work for a low number of categories
            return None
            
    elif nnc == 4 and nfc == 2:
            
        xy = dataframe.select_dtypes([float64])
        return fig

    else:
        
        if dataframe.index.dtype == int64:

            if ncc == 0:            
                sns.boxplot(data = dataframe, ax = ax)
                return fig
            
            else:
                dfMelt = melt(dataframe,
                              value_vars = list(numeric.columns), 
                              id_vars = list(categorical.columns))
                sns.boxplot(data = dfMelt, 
                            x = 'variable', y = 'value',
                            hue = categorical.columns[0],
                            ax = ax)
                return fig
        else:

            if ncc == 0:
                # column plot of the value in each column, grouped by index
                df_plot = dataframe.copy(deep = True)
                float_cols = df_plot.select_dtypes([float64]).columns
                df_plot['index'] = df_plot.index
                dfMelt = melt(df_plot, id_vars = 'index', 
                              value_vars = list(float_cols))
                sns.barplot(data = dfMelt, ax = ax, hue = 'variable',
                            x = 'index', y = 'value')
                return fig

            
    return None


enamldef DataFrame_TableView(Container):
    
    attr model
    
    Html:
        source = getDataFrameHtml(model)



class DataFrame_FigureModel(object):
    
    
    def __init__(self, dataframe):
        
        self.figure = getDataFrameFigure(dataframe)



enamldef DataFrame_FigureView(Container):
    
    attr model

    hug_height = 'strong'
        
    Conditional:
        condition = model.figure is not None
        MPLCanvas:
            figure = model.figure
    