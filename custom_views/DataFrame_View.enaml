# Enaml
from enaml.widgets.api import Container, Html, MPLCanvas
from enaml.core.api import Conditional

# Plotting                             
from matplotlib.figure import Figure
import matplotlib.pyplot as plt
import seaborn as sns
from modules.dataframe_figures import (
    bar_fig_grouped_wf,
    box_fig_lf, box_fig_wf, box_fig_grouped_wf, 
    confmat_fig, confmat_cat__a_fig, 
    distribution_fig, 
    scatter_fig, scatter_cat__acm_fig, scatter_cat__c_fig, scatter_cat__cm_fig,
    timeseries_fig
    )

# Numerical
from numpy import int32, int64, float64
from pandas import melt, DatetimeIndex


def _getDataFrameRowHtml(dataframe, ix, max_cols):

    html = ''
    cols = list(dataframe.columns)
    if len(cols) <= max_cols:
        for col in cols:
            html += '<td>%s</td>' % str(dataframe.get_value(ix, col))
    else:
        for col in cols[:max_cols // 2]:
            html += '<td>%s</td>' % str(dataframe.get_value(ix, col))
        html += '<td>...</td>'
        for col in cols[- max_cols // 2:]:
            html += '<td>%s</td>' % str(dataframe.get_value(ix, col))         

    return html


def _getDataFrameRowsHtml(dataframe, max_cols):
    
    html = ''
    
    for ix in dataframe.index:
        # Create row
        html += '<tr>'
        # Add index value
        html += '<th>%s</th>' % str(ix)
        # Add data values
        html += _getDataFrameRowHtml(dataframe, ix, max_cols)
        # Close row
        html += '</tr>'
        
    return html


def getDataFrameHeaderHtml(dataframe, max_cols):

    cols = list(dataframe.columns)    
    html = '<thead><tr>'
    if dataframe.index.name:
        html += '<th>%s</th>' % str(dataframe.index.name)
    else:
        html += '<th></th>'
    
    if len(cols) <= max_cols:
        for col in dataframe.columns:
            html += '<th>%s</th>' % col
    else:
        for col in cols[:max_cols // 2]:
            html += '<th>%s</th>' % col
        html += '<th>...</th>'
        for col in cols[- max_cols // 2:]:
            html += '<th>%s</th>' % col

    html += '</tr></thead>'

    return html


def getDataFrameHtml(dataframe, max_rows = 100, max_cols = 20):

    # Create table
    html = '<table border = "3">'
    
    # Create header row
    html += getDataFrameHeaderHtml(dataframe, max_cols)
    
    # Create rows
    html += '<tbody>'
    
    if len(dataframe) <= max_rows:
        html += _getDataFrameRowsHtml(dataframe, max_cols)
    else:
        html += _getDataFrameRowsHtml(dataframe.head(max_rows // 2), max_cols)
        if len(dataframe.columns) <= max_cols:
            html += ('<tr><th>...</th>' + 
                     '<td>...</td>' * len(dataframe.columns) + 
                     '</tr>')
        else:
            html += ('<tr><th>...</th>' + 
                     '<td>...</td>' * (max_cols + 1) + 
                     '</tr>')            
        html += _getDataFrameRowsHtml(dataframe.tail(max_rows // 2), max_cols)

    html += '</tbody>'
    
    # Close table tag
    html += '</table>'

    return html
    
    
def getDataFrameFigure(dataframe):
    
    if len(dataframe) == 0:
        return None
    
    # Time-series
    if isinstance(dataframe.index, DatetimeIndex):
        return timeseries_fig(dataframe)
        
    # Get sub-dataframes by dtype
    df_object = dataframe.select_dtypes([object])
    df_integer = dataframe.select_dtypes(['integer'])
    df_numeric = dataframe.select_dtypes(['number'])
    df_floating = dataframe.select_dtypes(['floating'])

    # Count the number of columns in each sub-dataframe
    nc = len(dataframe.columns)
    noc = len(df_object.columns)
    nic = len(df_integer.columns)
    nnc = len(df_numeric.columns)
    nfc = len(df_floating.columns)

    # Determine some boolean properties
    all_cols_int = nc == nic
    index_is_int = dataframe.index.dtype in (int32, int64)
    index_is_obj = dataframe.index.dtype == object

    # Determine if the unique values of the first 2 columns are identical
    cols01uniqueequal = False
    if len(dataframe) > 0 and nc >= 2:
        cols01uniqueequal = (set(dataframe.ix[:, 0].unique()) == 
                             set(dataframe.ix[:, 1].unique()))

    # Create plot function mapping based on number of numeric and object cols    
    nnc_noc_fig = {(1, 0): distribution_fig,
                   (1, 1): box_fig_lf,
                   (2, 0): scatter_fig,
                   (2, 1): scatter_cat__c_fig,
                   (2, 2): scatter_cat__cm_fig,
                   (2, 3): scatter_cat__acm_fig}

    # Return the appropriate figure type for the dataframe, if any
    if all_cols_int and index_is_obj:
        return confmat_fig(dataframe)

    elif nnc == 0 and noc == 3 and cols01uniqueequal:    
        return confmat_cat__a_fig(dataframe)            

    elif (nnc, noc) in nnc_noc_fig.keys():
        return nnc_noc_fig[(nnc, noc)](dataframe)

    else:
        if index_is_int:
            if noc == 0:            
                return box_fig_wf(dataframe)
            else:
                return box_fig_grouped_wf(dataframe)
        elif index_is_obj:
            if noc == 0:
                return bar_fig_grouped_wf(dataframe)
            
    return None



enamldef DataFrame_TableView(Container):
    
    attr model
    
    Html:
        source = getDataFrameHtml(model)
#        source = model.to_html(max_cols = 20, max_rows = 50)
        

class DataFrame_FigureModel(object):
    
    
    def __init__(self, dataframe):
        
        self.figure = (getDataFrameFigure(dataframe)
                       if len(dataframe.columns) <= 20
                       else plt.figure())


enamldef DataFrame_FigureView(Container):
    
    attr model

    hug_height = 'strong'
        
    Conditional:
        condition = model.figure is not None
        MPLCanvas:
            figure = model.figure
    