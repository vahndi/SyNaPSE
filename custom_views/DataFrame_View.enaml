# Enaml
from enaml.widgets.api import Container, Html, MPLCanvas
from enaml.core.api import Conditional

# Plotting                             
from matplotlib.figure import Figure
import matplotlib.pyplot as plt
from matplotlib.markers import MarkerStyle
from plotFunctions import getFigureShape
import seaborn as sns
from modules.dataframe_figures import (
    box_fig, confmat_cataxes_fig, confmat_fig, distribution_fig, scatter_fig, 
    scatter_cat__acm_fig, scatter_cat__c_fig, scatter_cat__cm_fig)
markers = MarkerStyle.filled_markers


# Numerical
from numpy import int32, int64, float64
from pandas import melt


def getDataFrameHtml(dataframe):

    # Create table
    source = '<table border = "3">'
    
    # Create header row
    source += '<thead><tr>'
    if dataframe.index.name:
        source += '<th>%s</th>' % str(dataframe.index.name)
    else:
        source += '<th></th>'
    for col in dataframe.columns:
        source += '<th>%s</th>' % col
    
    # Close header row
    source += '</tr></thead>'
    
    # Create rows
    source += '<tbody>'
    for ix in dataframe.index:
        # Create row
        source += '<tr>'
        # Add index value
        source += '<th>%s</th>' % str(ix)
        # Add data values
        for col in dataframe.columns:
            source += '<td>%s</td>' % str(dataframe.get_value(ix, col))
        # Close row
        source += '</tr>'
    source += '</tbody>'
    
    # Close table tag
    source += '</table>'

    return source
    
    
def getDataFrameFigure(dataframe):
    
    fig = Figure()
    ax = fig.add_subplot(111)

    categorical = dataframe.select_dtypes([object])
    integer = dataframe.select_dtypes(['integer'])
    numeric = dataframe.select_dtypes(['number'])
    floating = dataframe.select_dtypes(['floating'])
    all_cols_int = (len(dataframe.dtypes.unique()) == 1 and 
                    dataframe.dtypes[0] in (int32, int64))
    cols01uniqueequal = False
    if len(dataframe) > 0 and len (dataframe.columns) >= 2:
        cols01uniqueequal = (dataframe.ix[:, 0].unique() == 
                             dataframe.ix[:, 1].unique())
    nnc = len(numeric.columns)
    ncc = len(categorical.columns)
    nic = len(integer.columns)
    nfc = list(dataframe.dtypes).count(float64)
    
    nnc_ncc = {(1, 0): distribution_fig,
               (1, 1): box_fig,
               (2, 0): scatter_fig,
               (2, 1): scatter_cat__c_fig,
               (2, 2): scatter_cat__cm_fig,
               (2, 3): scatter_cat__acm_fig}

    if all_cols_int:
        return confmat_fig(dataframe)
    
    elif nnc == 0 and ncc == 3:        
        if cols01uniqueequal:        
            return confmat_cataxes_fig(dataframe)            
        else:            
            return None

    elif (nnc, ncc) in nnc_ncc.keys():
        return nnc_ncc[(nnc, ncc)](dataframe)

    else:
        
        if dataframe.index.dtype == int64:

            if ncc == 0:            
                sns.boxplot(data = dataframe, ax = ax)
                return fig
            
            else:
                dfMelt = melt(dataframe,
                              value_vars = list(numeric.columns), 
                              id_vars = list(categorical.columns))
                sns.boxplot(data = dfMelt, 
                            x = 'variable', y = 'value',
                            hue = categorical.columns[0],
                            ax = ax)
                return fig
        else:

            if ncc == 0:
                # column plot of the value in each column, grouped by index
                df_plot = dataframe.copy(deep = True)
                float_cols = df_plot.select_dtypes([float64]).columns
                df_plot['index'] = df_plot.index
                dfMelt = melt(df_plot, id_vars = 'index', 
                              value_vars = list(float_cols))
                sns.barplot(data = dfMelt, ax = ax, hue = 'variable',
                            x = 'index', y = 'value')
                return fig

            
    return None



enamldef DataFrame_TableView(Container):
    
    attr model
    
    Html:
        source = getDataFrameHtml(model)



class DataFrame_FigureModel(object):
    
    
    def __init__(self, dataframe):
        
        self.figure = getDataFrameFigure(dataframe)



enamldef DataFrame_FigureView(Container):
    
    attr model

    hug_height = 'strong'
        
    Conditional:
        condition = model.figure is not None
        MPLCanvas:
            figure = model.figure
    