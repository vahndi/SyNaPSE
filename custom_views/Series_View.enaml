# Enaml
from enaml.widgets.api import Container, Html, MPLCanvas
from enaml.core.api import Conditional

# Plotting                             
from matplotlib.figure import Figure
import matplotlib.pyplot as plt
from matplotlib.markers import MarkerStyle
import seaborn as sns

from modules.series_figures import (
    bar_fig, bar_count_fig, confmat_fig, distribution_fig, pie_fig
    )


def getSeriesHtml(series):

    # Create table
    source = '<table border = "2">'
    
    # Create header row
    source += '<thead><tr>'
    if series.index.name is not None:
        source += '<th>%s</th>' % str(series.index.name)
    else:
        source += '<th></th>'
    
    if series.name is not None:
        source += '<th>%s</th>' % str(series.name)
    else:
        source += '<th></th>'
    
    # Close header row
    source += '</tr></thead>'
    
    # Create rows
    source += '<tbody>'
    for ix in series.index:
        # Create row
        source += '<tr>'
        # Add index value
        source += '<th>%s</th>' % str(ix)
        # Add data value
        source += '<td>%s</td>' % str(series.get_value(ix))
        # Close row
        source += '</tr>'
    source += '</tbody>'
    
    # Close table tag
    source += '</table>'
    
    return source


def getSeriesFigure(series):

    fig = Figure()
    ax = fig.add_subplot(111)

    if not series.index.name:
        
        if series.dtype == 'object':

            if len(series.unique()) < len(series):
                
                return bar_count_fig(series)

        elif series.dtype == 'float':

            return distribution_fig(series)
                
        return None
        
    if series.dtype == object:

        return confmat_fig(series)

    else:

        # Numeric Series -> pie or column plot
        if round(series.sum(), 3) == 1:
            
            return pie_fig(series)
            
        else:
            
            return bar_fig(series)

    return None



enamldef Series_TableView(Container):
    
    attr model
    
    Html:
        source = getSeriesHtml(model)
        


class Series_FigureModel(object):
    
    
    def __init__(self, series):
        
        self.figure = getSeriesFigure(series)



enamldef Series_FigureView(Container):
    
    attr model

    hug_height = 'strong'
        
    Conditional:
        condition = model.figure is not None
        MPLCanvas:
            figure = model.figure
