# Atom
from atom.api import Atom, Callable, ContainerList, Dict, Str, Value
from atom.api import observe

# Enaml
from enaml.widgets.api import Action, Container, MainWindow, Menu, MenuBar
from enaml.core.api import Conditional, Include, Looper

# Other
from functools import partial



def ToWords(CamelCaseString):

    words = CamelCaseString[0]    
    for i in range(1, len(CamelCaseString)):
        if CamelCaseString[i].isupper():
            words += ' '
        words += CamelCaseString[i]
    return words


enamldef DictMenuAction(Action):
    
    attr dictmenu_item
    attr triggered_func
    attr tooltip_attribute

    text = str(dictmenu_item.calc_name)
    triggered :: 
        triggered_func(dictmenu_item)
    tool_tip =  (getattr(dictmenu_item.tooltip_attribute)
                if tooltip_attribute
                else '')



class DictMenu_Model(Atom):


    menu = Value(Menu)
    menu_dict = Value(Dict)
    menu_name = Str()
    triggered_func = Callable()
    selectable_items = ContainerList()
    tooltip_attribute = Str()


    def __init__(self, menu_dict, menu_name, 
                 triggered_func, selectable_items,
                 tooltip_attribute = None):
        
        self.menu_dict = menu_dict
        self.menu_name = menu_name
        self.triggered_func = triggered_func
        self.selectable_items = selectable_items
        self.selectable_items_changed(change = None)
        self.tooltip_attribute = tooltip_attribute
        

    @observe('selectable_items')
    def selectable_items_changed(self, change):
        
        self.menu = self.build_menu(self.menu_dict, 
                                    self.menu_name)


    def build_menu(self, menu_dict, menu_name):

        # Create a new Menu and a list to add items to        
        menu = Menu(title = ToWords(menu_name))
        menu_items = []

        # For each key in the dict
        for k in sorted(menu_dict.keys()):
            # If it holds a list of files
            if type(menu_dict[k]) is list:
                # Append them one by one to the item list
                for f in menu_dict[k]:
                    menu_items.append(
                        DictMenuAction(
                            dictmenu_item = f,
                            triggered_func = self.triggered_func,
                            visible = f in self.selectable_items,
                            tooltip_attribute = self.tooltip_attribute
                            )
                        )
            elif type(menu_dict[k]) is dict: # If it holds a submenu
                # Pass it through to the build menu function
                menu_items.append(self.build_menu(
                                         menu_dict = menu_dict[k],
                                         menu_name = k
                                         )
                                 )

        # Add children to the menu
        menu.insert_children(before = None, 
                             insert = menu_items)
        menu.visible = any([item.visible for item in menu_items])
        
        return menu



enamldef DictMenu_View(Menu): me:
    """
    N.B. to include a DictMenu_View in a MenuBar or Menu use:

    Include:
        objects = [DictMenu_Model(menu_dict = dict_name,
                                  menu_name = 'Menu Name').menu]
    """
    attr model
    
    Include:
        objects = [model.menu]

        