from atom.api import Atom, Bool, ContainerList, Int, List, Callable, Value
from enaml.core.api import Conditional, Looper
from enaml.widgets.api import  (
    CheckBox, Container, GroupBox, Label, PushButton, RadioButton, ScrollArea)
from enaml.layout.api import grid



class OrderedListItem(object):
    
    
    def __init__(self, name, container):
        
        self.name = name
        self.container = container


    def __str__(self):
        
        return str(self.name)



class OrderedList_Model(object):


    class ui(Atom):

        unselected_items = ContainerList(OrderedListItem)
        selected_items = ContainerList(OrderedListItem) 
        selected_item = Value(OrderedListItem)
        unselected_item = Value(OrderedListItem)
        scroll_areas = Bool()
        fn_select_item = Callable()
        fn_unselect_item = Callable()
        fn_move_item_up = Callable()
        fn_move_item_down = Callable()
        
    
    def __init__(self, item_names, selected_item_names = [], 
                 scroll_areas = True,
                 selected_changed_subscriber = None):
        '''
        Arguments
        ---------
        item_names:
            a list of the names of the items which can be selected
        selected_item_names:
            a list of the names of the items which are already selected
        scroll_areas:
            whether to show lists in scroll areas to save space
        selected_changed_subscriber:
            a function to call when the selected items are changed, in case
            the contents of other widgets depend on the selected items
        '''
        self.item_names = item_names
        self.selected_items = [OrderedListItem(name, self) 
                               for name in list(selected_item_names)]
        self.unselected_items = [OrderedListItem(name, self) 
                                 for name in 
                                 [n for n in list(item_names) 
                                  if n not in selected_item_names]]

        self.selected_changed_subscriber = selected_changed_subscriber

        self.uiModel = OrderedList_Model.ui(
                        selected_items = self.selected_items,
                        unselected_items = self.unselected_items,
                        selected_item = None,
                        unselected_item = self.unselected_items[0],
                        scroll_areas = scroll_areas,
                        fn_select_item = self.select_item,
                        fn_unselect_item = self.unselect_item,
                        fn_move_item_up = self.move_item_up,
                        fn_move_item_down = self.move_item_down)


    def select_item(self):
        '''
        move the checked unselected item to the selected items
        '''
        item = self.uiModel.unselected_item
        
        if item is not None:

            self.unselected_items.remove(item)
            self.selected_items.append(item)

            self.uiModel.unselected_items = self.unselected_items        
            self.uiModel.selected_items = self.selected_items
            self.uiModel.unselected_item = None
            self.uiModel.selected_item = item
            
            if self.selected_changed_subscriber:
                self.selected_changed_subscriber()

    
    def unselect_item(self):
        '''
        move the checked selected item to the unselected items
        '''
        item = self.uiModel.selected_item
        
        if item is not None:
    
            self.selected_items.remove(item)
            self.unselected_items.append(item)

            self.uiModel.selected_items = self.selected_items    
            self.uiModel.unselected_items = self.unselected_items            
            self.uiModel.selected_item = None
            self.uiModel.unselected_item = item

            if self.selected_changed_subscriber:
                self.selected_changed_subscriber()


    def move_item_up(self):
        '''
        move the checked unselected item up one
        '''
        item = self.uiModel.selected_item
        idx_selected = self.selected_items.index(item)
        
        if idx_selected > 0:
            
            self.selected_items.remove(item)
            self.selected_items.insert(idx_selected - 1, item)
            self.uiModel.selected_items = self.selected_items
            self.uiModel.selected_item = item

            if self.selected_changed_subscriber:
                self.selected_changed_subscriber()


    def move_item_down(self):
        '''
        move the checked unselected item down one
        '''
        item = self.uiModel.selected_item
        idx_selected = self.selected_items.index(item)
        
        if idx_selected < len(self.selected_items) - 1:
            
            self.selected_items.remove(item)
            self.selected_items.insert(idx_selected + 1, item)
            self.uiModel.selected_items = self.selected_items
            self.uiModel.selected_item = item

            if self.selected_changed_subscriber:
                self.selected_changed_subscriber()

    def selected_item_names(self):
        
        return [str(i) for i in self.selected_items]


            
enamldef OrderedList_View(GroupBox):
    '''
    '''

    attr model

    Container:
        constraints = [
            grid(
                [lbl_unselected,  lbl_selected],
                [rbs_unselected,  rbs_selected],
                [btn_select, btn_unselect],
                [None, btn_move_up],
                [None, btn_move_down],
                column_align = 'width',
                row_align = 'v_center',
            ),
        ]


        Label: lbl_unselected:
            text = 'Unselected Items'
            
        Container: rbs_unselected:   
            Looper: lpr_unselected:
                iterable << [obj for obj in model.unselected_items]
                RadioButton: 
                    text << str(loop_item)
                    clicked:: 
                        model.unselected_item = loop_item
                    checked << loop_item == model.unselected_item

        PushButton: btn_select:
            text = 'Select'
            clicked::
                model.fn_select_item()

        
        Label: lbl_selected:
            text = 'Selected Items'
        Container: rbs_selected:
            Looper: lpr_selected:
                iterable << [obj for obj in model.selected_items]
                RadioButton: 
                    text << str(loop_item)
                    clicked:: 
                        model.selected_item = loop_item
                    checked << loop_item == model.selected_item
    
        PushButton: btn_unselect:
            text = 'Unselect'
            clicked::
                model.fn_unselect_item()


        PushButton: btn_move_up:
            text = 'Move Up'
            clicked::
                model.fn_move_item_up()
                
        PushButton: btn_move_down:
            text = 'Move Down'
            clicked::
                model.fn_move_item_down()    