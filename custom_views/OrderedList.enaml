from atom.api import Atom, Bool, ContainerList, Int, List, Callable, Value
from enaml.core.api import Conditional, Looper
from enaml.widgets.api import  (
    CheckBox, Container, GroupBox, Label, PushButton, RadioButton, ScrollArea)
from enaml.layout.api import grid



class OrderedListItem(object):
    
    
    def __init__(self, name, container):
        
        self.name = name
        self.container = container


    def __str__(self):
        
        return str(self.name)



class OrderedList_UI(Atom):

    list_items = ContainerList(OrderedListItem) 
    selected_item = Value(OrderedListItem)
    fn_move_item_up = Callable()
    fn_move_item_down = Callable()



class OrderedList_Model(object):


    def __init__(self, item_names, fn_selected_changed = None):
        '''
        Arguments
        ---------
        item_names (iterable of str):
            A list of the names of the items which can be selected.
        fn_selected_changed (Callable or None):
            A function to call when the selected items are changed, in case
            the contents of other widgets depend on the selected items. The 
            function will be called with a list of names of items which are
            selected.
        '''
        self.item_names = item_names
        
        self.list_items = [OrderedListItem(name, self) 
                               for name in list(item_names)]
                                
        self.fn_selected_changed = fn_selected_changed

        self.uiModel = OrderedList_UI(
                        list_items = self.list_items,
                        selected_item = None,
                        fn_move_item_up = self.move_item_up,
                        fn_move_item_down = self.move_item_down
                        )


    def move_item_up(self):
        '''
        move the checked selected item up one
        '''
        item = self.uiModel.selected_item
        idx_selected = self.list_items.index(item)
        
        if idx_selected > 0:
            
            self.list_items.remove(item)
            self.list_items.insert(idx_selected - 1, item)
            self.uiModel.list_items = self.list_items
            self.uiModel.selected_item = item

            if self.fn_selected_changed:
                self.fn_selected_changed(self.ordered_item_names())


    def move_item_down(self):
        '''
        move the checked selected item down one
        '''
        item = self.uiModel.selected_item
        idx_selected = self.list_items.index(item)
        
        if idx_selected < len(self.list_items) - 1:
            
            self.list_items.remove(item)
            self.list_items.insert(idx_selected + 1, item)
            self.uiModel.list_items = self.list_items
            self.uiModel.selected_item = item

            if self.fn_selected_changed:
                self.fn_selected_changed(self.ordered_item_names())


    def ordered_item_names(self):
        
        return [str(i) for i in self.list_items]


            
enamldef OrderedList_View(GroupBox):
    '''
    '''

    attr model

    Container:
        constraints = [
            grid(
                [lbl_selected],
                [rbs_selected],
                [btn_move_up],
                [btn_move_down],
                column_align = 'width',
                row_align = 'v_center',
            ),
        ]

        
        Label: lbl_selected:
            text = 'List Items'

        ScrollArea: rbs_selected:            
            Container: 
                Looper: lpr_selected:
                    iterable << [obj for obj in model.list_items]
                    RadioButton: 
                        text << str(loop_item)
                        clicked:: 
                            model.selected_item = loop_item
                        checked << loop_item == model.selected_item

        PushButton: btn_move_up:
            text = 'Move Up'
            clicked::
                model.fn_move_item_up()
                
        PushButton: btn_move_down:
            text = 'Move Down'
            clicked::
                model.fn_move_item_down()    