# Enaml
from enaml.widgets.api import GroupBox

from models_views.flowElement import FlowElement

# Previous elements
from ...core.LoadDataFrame import LoadDataFrame

from pandas import Series, Index, concat
import matplotlib.pyplot as plt
import seaborn as sns


def label_series(series, name, index_name):
    
    return Series(series,
                  name = name,
                  index = Index(series.index,
                              name = index_name)
                  )


def getHistogramFigure(data):
    
    fig = plt.figure()
    ax = fig.add_subplot(111)
    data.hist(ax = ax)
    return fig


def getStats(dataframe):
    
    # N.B. Can't use mode because it may return more than one value
    df = dataframe.select_dtypes(['number'])
    df_stats = concat([df.mean(), df.mad(), df.median(), df.min(),
                          df.max(), df.std(), df.var(), df.sem(),
                          df.skew(), df.kurt()], 
                         axis = 1)
    df_stats.columns = ['Mean', 'Mean Absolute Deviation', 'Median', 
                        'Minimum', 'Maximum', 'Standard Deviation', 'Variance', 
                        'Standard Error of Mean', 'Skew', 'Kurtosis']
    df_stats = df_stats.transpose()
    df_stats.index.name = 'Statistic'
    return df_stats



class DataFrameInfo_Model(FlowElement):
    

    elementName = 'Info'
    precedingElements = [LoadDataFrame]

    
    def setInputs(self, dataFrame):

        self._dataFrame = dataFrame


    def getOutputs(self):
        
        try:
            
            df = self._dataFrame
            
            return {'dataFrame': df,
                    'Attributes':
                        {'axes': df.axes,
                        'dtypes': label_series(df.dtypes, 'dtype', 'column'),
                        'dtype_counts': label_series(df.get_dtype_counts(), 
                                                     'count', 'dtype'),
                        'memory_usage': label_series(df.memory_usage(),
                                                     'bytes', 'column'),
                        'ndim': df.ndim,
                        'size': df.size,
                        'shape': df.shape
                        },
                     'Methods':
                         {'describe': {str(dt): df.describe(include = [dt]) 
                                       for dt in df.dtypes.unique()}},
                     'Plots':
                         {'Histogram': 
                             {'All': getHistogramFigure(df),
                              'Individual': {col: getHistogramFigure(df[col])
                                             for col in 
                                             df.select_dtypes(['number']
                                                                 ).columns}
                              }
                          },
                     'Stats': getStats(df)
                    }
        
        except Exception as e:
            
            return self.standard_exception(e)
            
            

enamldef DataFrameInfo_View(GroupBox):
    
    pass