# Atom
from atom.api import Atom, Bool, Int, List, Str, Value

# Enaml
from enaml.widgets.api import CheckBox, Form, GroupBox, Label, ObjectCombo
from enaml.stdlib.fields import FloatField, IntField
from enaml.core.api import Conditional

from custom_views.AutoSyncField import AutoSyncField
from custom_views.CheckBoxList import CheckBoxList_Model, CheckBoxList_View
from models_views.flowElement import FlowElement
from pandasFunctions import getRowNames

# Previous elements
from ...core.ReadDataFrame import ReadDataFrame



class SelectRows_Model(FlowElement):
    

    elementName = 'Select Rows'
    precedingElements = [ReadDataFrame]
    
    
    class ui(Atom):
        
        # method
        method = Str('string')
        method_list = List(str)
        # starts_with
        starts_with = Str()
        # ends_with
        ends_with = Str()
        # contains
        contains = Str()
        # does_not_contain
        does_not_contain = Str()
        # regular expression
        expression = Str()
        # start index
        range_start_int = Int()
        use_range_start_int = Bool()
        # end index
        range_end_int = Int()
        use_range_end_int = Bool()
        # first and last rows
        fl_rows = List(str)
        # first row name
        first_row_name = Str()
        use_first_row_name = Bool()
        # last row name
        last_row_name = Str()
        use_last_row_name = Bool() 
        # manual selection
        manual_rows = Value(Atom)        
        # order_alphabetically
        order_alphabetically = Bool(False)


    def setInputs(self, dataFrame):

        self._dataFrame = dataFrame
        # Limit selection methods based on the dtype of the index
        if dataFrame.index.dtype == object:
            method_list = ['string', 'regex', 'index range', 
                           'name range', 'manual']
        else:
            method_list = ['index range', 'manual']
            
        self.manual_rows = CheckBoxList_Model(dataFrame.index)
        self.dtype_dict = {'float': float,
                           'int': int,
                           'number': 'number',
                           'string': object}
        self.uiModel = SelectRows_Model.ui(
                            method_list = method_list,
                            manual_rows = self.manual_rows.uiModel,
                            fl_rows = [str(i) for i in list(dataFrame.index)]
                            )

    
    def getOutputs(self):

        try:
            
            df = self._dataFrame            
            
            if self.uiModel.method == 'string':
                
                rows = getRowNames(
                       self._dataFrame,
                       startsWith = self.uiModel.starts_with,
                       endsWith = self.uiModel.ends_with,
                       contains = self.uiModel.contains,
                       doesNotContain = self.uiModel.does_not_contain,
                       orderAlphabetically = self.uiModel.order_alphabetically)
                df = df.loc[rows]
                
            elif self.uiModel.method == 'regex':
                
                df = df.filter(regex = self.uiModel.expression,
                               axis = 0)
                if self.uiModel.order_alphabetically:
                    df = df.loc[sorted(list(df.index))]
                    
            elif self.uiModel.method == 'index range':
                
                rs = self.uiModel.range_start_int
                re = self.uiModel.range_end_int
                if (self.uiModel.use_range_start_int and
                    self.uiModel.use_range_end_int):
                        df = df.iloc[rs:re, :]
                elif self.uiModel.use_range_start_int:
                        df = df.iloc[rs:, :]
                elif self.uiModel.use_range_end_int:
                        df = df.iloc[:re, :]

            elif self.uiModel.method == 'name range':
                
                fc = self.uiModel.first_row_name
                lc = self.uiModel.last_row_name
                if (self.uiModel.use_first_row_name and
                    self.uiModel.use_last_row_name):
                        df = df.loc[fc:lc, :]
                elif self.uiModel.use_first_row_name:
                        df = df.loc[fc:, :]
                elif self.uiModel.use_last_row_name:
                        df = df.loc[:lc, :]

            else:
                
                df = df.loc[self.manual_rows.getCheckedItemNames()]
            
            # sort, if specified
            if self.uiModel.order_alphabetically:
                df = df[sorted(list(df.index))]

            return {'dataFrame': df}
            
        except Exception as e:
            
            return self.standard_exception(e)



enamldef SelectRows_View(GroupBox): me:

    attr model

    Form:

        Label:
            text = 'Method'
        ObjectCombo:
            items = model.method_list
            selected := model.method


        Conditional:
            condition << (model.method == 'string' and 
                          'string' in model.method_list)
            
            Label:
                text = 'Starts With'
            AutoSyncField:
                text := model.starts_with

            Label:
                text = 'Ends With'
            AutoSyncField:
                text := model.ends_with

            Label:
                text = 'Contains'
            AutoSyncField:
                text := model.contains

            Label:
                text = 'Does Not Contain'
            AutoSyncField:
                text := model.does_not_contain
    

        Conditional:
            condition << (model.method == 'regex' and 
                          'regex' in model.method_list)

            Label:
                text = 'Expression'
            AutoSyncField:
                text := model.expression


        Conditional:
            condition << model.method == 'index range'
            
            CheckBox: 
                text = 'Lower Index (inclusive)'
                checked := model.use_range_start_int
            Label:
                text = 'N/A'
                visible << not model.use_range_start_int
            IntField:
                value := model.range_start_int
                minimum = 0
                maximum = len(model.fl_rows)
                visible << model.use_range_start_int

            CheckBox:
                text = 'Upper Index (exclusive)'
                checked := model.use_range_end_int
            Label:
                text = 'N/A'
                visible << not model.use_range_end_int
            IntField:
                value := model.range_end_int
                minimum = 0
                maximum = len(model.fl_rows)
                visible << model.use_range_end_int


        Conditional:
            condition << (model.method == 'name range' and
                          'name range' in model.method_list)
            
            CheckBox: 
                text = 'First Name'
                checked := model.use_first_row_name
            Label:
                text = 'N/A'
                visible << not model.use_first_row_name
            ObjectCombo:
                items = model.fl_rows
                selected := model.first_row_name
                visible << model.use_first_row_name

            CheckBox:
                text = 'Last Name'
                checked := model.use_last_row_name
            Label:
                text = 'N/A'
                visible << not model.use_last_row_name
            ObjectCombo:
                items = model.fl_rows
                selected := model.last_row_name
                visible << model.use_last_row_name


        Conditional:
            condition << model.method == 'manual'

            Label:
                text = 'Rows'
            CheckBoxList_View:
                model := me.model.manual_rows


        Label:
            text = 'Order Alphabetically'
        CheckBox:
            checked := model.order_alphabetically