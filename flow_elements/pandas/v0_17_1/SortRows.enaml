# Atom
from atom.api import Atom, Bool, ContainerList, List, Str, Value

# Enaml
from enaml.core.api import Conditional
from enaml.widgets.api import CheckBox, Form, GroupBox, Label, Notebook, ObjectCombo, Page
from custom_views.OrderedList import OrderedList_Model, OrderedList_View

# Models
from flow_elements.core.ABCs import ABCDataFrameToDataFrame



class SortRows_Model(ABCDataFrameToDataFrame):


    elementName = 'Sort Rows'


    class ui(Atom):

        # by_type
        by_type = Str('single')
        by_type_list = List(str, ['single', 'multiple'])
        by_type_tooltip = 'Sort by a single or multiple columns.'
        # by_single
        by_single = Str()
        by_single_list = List(str)
        by_single_tooltip = 'string name or list of names which refer to the axis items'
        # by_multiple
        by_multiple = Value(Atom)
        by_multiple_tooltip = 'Select the list of column names to sort by, in order of priority.'
        # ascending
        ascending = Bool(True)
        ascending_tooltip = 'Sort the selected columns in ascending (True) or descending (False) order.'
        # kind
        kind = Str('quicksort')
        kind_list = List(str, ['quicksort', 'mergesort', 'heapsort'])
        kind_tooltip = 'Choice of sorting algorithm. See also ndarray.np.sort for more information.\nmergesort is the only stable algorithm. \nFor DataFrames, this option is only applied when sorting on a single column or label.'
        # na_position
        na_position = Str('last')
        na_position_list = List(str, ['first', 'last'])
        na_position_tooltip = 'first puts NaNs at the beginning, last puts NaNs at the end'


    def setInputs(self, dataframe):

        self._dataframe = dataframe
        cols = list(dataframe.columns)
        self.by_multiple = OrderedList_Model(item_names = cols)
        self.uiModel = SortRows_Model.ui(
            by_single = cols[0],
            by_single_list = cols, 
            by_multiple = self.by_multiple.uiModel
            )


    def getOutputs(self):

        try:

            # Assign local variables
            args = {
                'by': (self.uiModel.by_single
                       if self.uiModel.by_type == 'single' 
                       else self.by_multiple.selected_item_names()),
                'ascending': self.uiModel.ascending,
                'kind': self.uiModel.kind,
                'na_position': self.uiModel.na_position
                }
                
            return {'dataframe': self._dataframe.sort_values(** args)}

        except Exception as e:

            return self.standard_exception(e)



enamldef SortRows_View(GroupBox): me:

    attr model

    Form:

        Label:
            text = 'By Type'
            tool_tip = model.by_type_tooltip
        ObjectCombo:
            items = model.by_type_list
            selected := model.by_type
            tool_tip = model.by_type_tooltip

        Conditional:
            condition << model.by_type == 'single'
            Label:
                text = 'By Column'
                tool_tip = model.by_single_tooltip
            ObjectCombo:
                items = model.by_single_list
                selected := model.by_single
                tool_tip = model.by_single_tooltip
    

        Conditional:
            condition << model.by_type == 'multiple'
            Label:
                text = 'By Columns'
                tool_tip = model.by_multiple_tooltip
            OrderedList_View:
                model:= me.model.by_multiple
                tool_tip = me.model.by_multiple_tooltip
    

        Label:
            text = 'Ascending'
            tool_tip = model.ascending_tooltip
        CheckBox:
            checked := model.ascending
            tool_tip = model.ascending_tooltip

        Label:
            text = 'Kind'
            tool_tip = model.kind_tooltip
        ObjectCombo:
            items = model.kind_list
            selected := model.kind
            tool_tip = model.kind_tooltip

        Label:
            text = 'NA Position'
            tool_tip = model.na_position_tooltip
        ObjectCombo:
            items = model.na_position_list
            selected := model.na_position
            tool_tip = model.na_position_tooltip