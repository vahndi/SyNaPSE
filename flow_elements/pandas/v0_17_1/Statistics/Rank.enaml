# Atom
from atom.api import Atom, Bool, List, Str


# Enaml
from enaml.widgets.api import CheckBox, Form, GroupBox, Label, Notebook, ObjectCombo, Page

# Models
from flow_elements.core.ABCs import ABCDataFrameToDataFrame



class Rank_Model(ABCDataFrameToDataFrame):


    calc_name = 'Rank'


    class ui(Atom):

        # axis
        axis = Str('index')
        axis_list = List(str, ['index', 'columns'])
        axis_tooltip = 'The axis over which the calculation should be applied.'
        # numeric_only
        numeric_only = Bool(True)
        numeric_only_tooltip = 'Include only float, int, boolean data.'
        # method
        method = Str('average')
        method_list = List(str, ['average', 'min', 'max', 'first', 'dense'])
        method_tooltip = (
            'average: average rank of group\n' +
            'min: lowest rank in group\n' +
            'max: highest rank in group\n' +
            'first: ranks assigned in order they appear in the array\n' +
            'dense: like min, but rank always increases by 1 between groups'
            )
        # na_option
        na_option = Str('keep')
        na_option_list = List(str, ['keep', 'top', 'bottom'])
        na_option_tooltip = ('keep: leave NA values where they are\n' +
                             'top: smallest rank if ascending\n' +
                             'bottom: smallest rank if descending')
        # ascending
        ascending = Bool(True)
        ascending_tooltip = 'False for ranks by high (1) to low (N)'
        # pct
        pct = Bool(False)
        pct_tooltip = 'Computes percentage rank of data'


    def setInputs(self, dataframe):

        self._dataframe = dataframe
        self.uiModel = Rank_Model.ui()


    def getOutputs(self):

        try:

            # Assign local variables
            args = {
                'axis': self.uiModel.axis,
                'numeric_only': self.uiModel.numeric_only,
                'method': self.uiModel.method,
                'na_option': self.uiModel.na_option,
                'ascending': self.uiModel.ascending,
                'pct': self.uiModel.pct
                }

            return {'dataframe': self._dataframe.rank(**args)}
            
        except Exception as e:

            return self.standard_exception(e)



enamldef Rank_View(GroupBox): me:

    attr model

    Form:

        Label:
            text = 'Axis'
            tool_tip = model.axis_tooltip
        ObjectCombo:
            items = model.axis_list
            selected := model.axis
            tool_tip = model.axis_tooltip

        Label:
            text = 'Numeric Only'
            tool_tip = model.numeric_only_tooltip
        CheckBox:
            checked := model.numeric_only
            tool_tip = model.numeric_only_tooltip

        Label:
            text = 'Method'
            tool_tip = model.method_tooltip
        ObjectCombo:
            items = model.method_list
            selected := model.method
            tool_tip = model.method_tooltip

        Label:
            text = 'NA Option'
            tool_tip = model.na_option_tooltip
        ObjectCombo:
            items = model.na_option_list
            selected := model.na_option
            tool_tip = model.na_option_tooltip

        Label:
            text = 'Ascending'
            tool_tip = model.ascending_tooltip
        CheckBox:
            checked := model.ascending
            tool_tip = model.ascending_tooltip

        Label:
            text = 'Percentage'
            tool_tip = model.pct_tooltip
        CheckBox:
            checked := model.pct
            tool_tip = model.pct_tooltip
