# Atom
from atom.api import Atom, Bool, Int, List, Str, Value

# Enaml
from enaml.widgets.api import CheckBox, Form, GroupBox, Label, ObjectCombo
from custom_views.fields import FloatField, IntField
from enaml.core.api import Conditional

from custom_views.fields import Field
from custom_views.CheckBoxList import CheckBoxList_Model, CheckBoxList_View
from flow_elements.core.ABCs import ABCDataFrameToDataFrame
from pandasFunctions import getColumnNames
import re



class RenameColumns_Model(ABCDataFrameToDataFrame):
    
    elementName = 'Rename Columns'

    class ui(Atom):

        # prefix
        prefix = Str()
        use_prefix = Bool()
        prefix_tooltip = 'The text to prepend to each column name.'
        # suffix
        suffix = Str()
        use_suffix = Bool()
        suffix_tooltip = 'The text to append to each column name.'
        # find_and_replace
        find_and_replace = Bool()
        find_and_replace_tooltip = 'Find and replace text within column names?'
        # findrep_method
        findrep_method = Str('normal')
        findrep_method_list = List(str, ['normal', 'regex'])
        findrep_method_tooltip = ('normal: standard string replacement\n' +
                                  'regex: regular expression replacement')
        # find
        find = Str()
        find_tooltip = 'The text or pattern to find within column names.'
        # replace
        replace = Str()
        replace_tooltip = 'The text to replace the found text / pattern.'


    def setInputs(self, dataframe):

        self._dataframe = dataframe
        self.uiModel = RenameColumns_Model.ui()
        self.original_columns = dataframe.columns


    def getOutputs(self):

        try:

            df = self._dataframe
            df.columns = self.original_columns
            
            if self.uiModel.use_prefix:
                df = df.add_prefix(self.uiModel.prefix)
                
            if self.uiModel.use_suffix:
                df = df.add_suffix(self.uiModel.suffix)

            if self.uiModel.find_and_replace:
                if self.uiModel.findrep_method == 'normal':
                    cols = [col.replace(self.uiModel.find, 
                                        self.uiModel.replace)
                                  for col in df.columns]
                    if len(set(cols)) == len(cols):
                        df.columns = cols
                else:
                    p = re.compile('(' + self.uiModel.find + ')')
                    cols = [p.sub(self.uiModel.replace, col)
                            for col in df.columns]
                    if len(set(cols)) == len(cols):
                        df.columns = cols

            return {'dataframe': df}
                            

        except Exception as e:
            
            return self.standard_exception(e)



enamldef RenameColumns_View(GroupBox): me:

    attr model

    Form:

        CheckBox:
            text = 'Prefix'
            checked := model.use_prefix
            tool_tip = model.prefix_tooltip
        Label:
            text = 'N/A'
            visible << not model.use_prefix
        Field:
            text := model.prefix
            visible << model.use_prefix
            tool_tip = model.prefix_tooltip
            
        CheckBox:
            text = 'Suffix'
            checked := model.use_suffix
            tool_tip = model.suffix_tooltip
        Label:
            text = 'N/A'
            visible << not model.use_suffix
        Field:
            text := model.suffix
            visible << model.use_suffix
            tool_tip = model.suffix_tooltip
            
        Label:
            text = 'Find And Replace'
            tool_tip = model.find_and_replace_tooltip
        CheckBox:
            checked := model.find_and_replace
            tool_tip = model.find_and_replace_tooltip

        Conditional:
            condition << model.find_and_replace == True
            
            Label:
                text = 'Method'
                tool_tip = model.findrep_method_tooltip
            ObjectCombo:
                items = model.findrep_method_list
                selected := model.findrep_method
                tool_tip = model.findrep_method_tooltip
                
            Label:
                text = 'Find'
                tool_tip = model.find_tooltip
            Field:
                text := model.find
                tool_tip = model.find_tooltip

            Label:
                text = 'Replace'
                tool_tip = model.replace_tooltip
            Field:
                text := model.replace
                tool_tip = model.replace_tooltip

