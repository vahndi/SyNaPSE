from atom.api import Atom, Bool, Dict, List, Str

from enaml.core.api import Conditional
from enaml.widgets.api import (
    Action, CheckBox, ComboBox, Container, DockPane, GroupBox, Form, 
    Label, MainWindow, Menu, MenuBar, ObjectCombo, PopupView, PushButton, 
    Window
                              )

from sklearn import datasets
import pandas as pd
import seaborn as sns

#from models_views.flowElement import FlowElement
from ._base.ABCs import ABCOutputsDataFrame
from custom_views.fields import Field



sklearnDatasets = {'boston': datasets.load_boston, 
                   'breast_cancer': datasets.load_breast_cancer,
                   'diabetes': datasets.load_diabetes, 
                   'digits': datasets.load_digits, 
                   'linnerud': datasets.load_linnerud, 
                   'iris': datasets.load_iris}

seabornDatasets = {'anscombe': sns.load_dataset('anscombe'),
                   'attention': sns.load_dataset('attention'),
                   'brain_networks': sns.load_dataset('brain_networks'),
                   'car_crashes': sns.load_dataset('car_crashes'),
                   'exercise': sns.load_dataset('exercise'),
                   'flights': sns.load_dataset('flights'),
                   'gammas': sns.load_dataset('gammas'),
                   'iris': sns.load_dataset('iris'),
                   'planets': sns.load_dataset('planets'),
                   'tips': sns.load_dataset('tips'),
                   'titanic': sns.load_dataset('titanic')}



class ReadDataFrame_Model(ABCOutputsDataFrame):
    
    
    elementName = 'Read DataFrame'
    
    
    class ui(Atom):
        
        # source_type
        source_type = Str()
        source_type_list = List(str, ['csv', 'xls', 'seaborn', 'sklearn'])
        source_type_tooltip = 'Select the source of the dataframe'
        # source path
        source_path = Str()
        source_path_tooltip = 'Enter the path to the data source'
        # sheet_name
        sheet_name = Str()
        sheet_name_list = List(str)
        sheet_name_tooltip = 'Select the Excel data Worksheet'
        # sklearn_dataset
        sklearn_dataset = Str()
        sklearn_dataset_list = List(str, sorted(sklearnDatasets.keys()))
        sklearn_dataset_tooltip = 'Select the scikit-learn dataset to read'
        # seaborn_dataset
        seaborn_dataset = Str()
        seaborn_dataset_list = List(str, sorted(seabornDatasets.keys()))
        seaborn_dataset_tooltip = 'Select the seaborn  dataset to read'

        def get_sheet_name_list(self):
            
            return getExcelsheet_name_list(self.source_path)
    
    
    def __init__(self):
        
        self.uiModel = ReadDataFrame_Model.ui()
        
    
    def getOutputs(self):
        
        try:
            if self.uiModel.source_type == 'sklearn':
                # Load dataset
                ds = sklearnDatasets[self.uiModel.sklearn_dataset]()
                if 'feature_names' in ds.keys():
                    # Has feature names
                    data = pd.DataFrame(ds['data'], 
                                        columns = ds['feature_names'])
                else:
                    # Does not have feature names
                    data = pd.DataFrame(ds['data'])
                    data.columns = [str(col) for col in data.columns]
                if 'target_names' in ds.keys():
                    # Has target names
                    if len(ds['target'].shape) > 1:
                        # multiple target columns
                        target = pd.DataFrame(ds['target'],
                                              columns = ds['target_names'])
                    else:
                        # single target column with multiple categories
                        target = pd.Series(ds['target'], name = 'Target')  
                        target = target.apply(lambda t: ds['target_names'][t])                           
                else:
                    # Does not have target names
                    target = pd.Series(ds['target'], name = 'Target')
                
                # Join data and target columns and return
                dataframe = pd.concat([data, target], axis = 1)
            
            elif self.uiModel.source_type == 'seaborn':
                
                dataframe = seabornDatasets[self.uiModel.seaborn_dataset]
                
            elif self.uiModel.source_type in ('.csv', '.xls'):
                if os.path.exists(self.uiModel.source_path):
                    if self.uiModel.source_type == 'csv':
                        dataframe = pd.read_csv(self.uiModel.source_path)
                    elif self.uiModel.source_type == 'xls':
                        sheet_name = self.uiModel.sheet_name
                        if sheet_name == '':
                            sheet_name = None
                        dataframe = pd.read_excel(self.uiModel.source_path,
                                                  sheet_name = sheet_name)
                else:
                    return {'Outputs': 'Path does not exist'}
            else:
                return {'Outputs': 'Please select a source type'}    
        
            return {'dataframe': dataframe}        

        except Exception as e:
            
            return self.standard_exception(e)           



enamldef ReadDataFrame_View(GroupBox):
    
    attr model

    Form:
        Label:
            text = 'Type'
            tool_tip =  model.source_type_tooltip
        ObjectCombo:
            items = model.source_type_list
            selected := model.source_type
            tool_tip =  model.source_type_tooltip
            
        Conditional:
            condition << model.source_type in ('xls', 'csv')
            Label:
                text = 'Path'
                tool_tip = model.source_type_tooltip
            Field:
                text := model.source_path
                tool_tip = model.source_type_tooltip

        Conditional:
            condition << model.source_type == 'seaborn'
            Label:
                text = 'Dataset'
                tool_tip = model.seaborn_dataset_tooltip
            ObjectCombo: 
                items = model.seaborn_dataset_list
                selected := model.seaborn_dataset
                tool_tip = model.seaborn_dataset_tooltip
                
        Conditional:
            condition << model.source_type == 'sklearn'
            Label:
                text = 'Dataset'
                tool_tip = model.sklearn_dataset_tooltip
            ObjectCombo:
                items = model.sklearn_dataset_list
                selected := model.sklearn_dataset
                tool_tip = model.sklearn_dataset_tooltip
                
        Conditional:
            condition << model.source_type == 'xls'
            Label:
                text = 'Sheet Name'
                tool_tip = model.sheet_name_tooltip
            ObjectCombo:
                items = model.get_sheet_name_list()
                selected := model.sheet_name
                tool_tip = model.sheet_name_tooltip