# Atom
from atom.api import Atom, Bool, Int, List, Str


# Enaml
from enaml.core.api import Conditional
from enaml.widgets.api import CheckBox, Form, GroupBox, Label, Notebook, ObjectCombo, Page
from custom_views.fields import IntField

# Models
from ..._base.ABCs import ABCDataFrameToDataFrame, ABCSeriesToSeries

# Pandas
import pandas as pd
from pandas import DataFrame, Series, concat



class RollingStatistic_Model(ABCDataFrameToDataFrame, ABCSeriesToSeries):


    elementName = 'Rolling Statistic'


    class ui(Atom):

        # window
        window = Int(1)
        window_min = Int(1)
        window_tooltip = 'Size of the moving window. This is the number of observations used for calculating the statistic.'
        # min_periods
        min_periods = Int()
        min_periods_min = Int(1)
        use_min_periods = Bool()
        min_periods_tooltip = 'Minimum number of observations in window required to have a value (otherwise result is NA).'
        # center
        center = Bool()
        center_tooltip = 'Set the labels at the center of the window.\n(By default, the result is set to the right edge of the window).'
        # resample
        resample = Bool()
        resample_tooltip = 'Resample the data to a user-specified frequency before computing the statistic.'
        # freq
        freq = Str('D')
        freq_list = List(str, ['B', 'C', 'D', 'W', 'M', 'BM', 'CBM', 'MS', 'BMS', 'CBMS', 'Q', 'BQ', 'BQS', 'A', 'BA', 'AS', 'BAS', 'BH', 'H', 'T', 'S', 'L', 'U', 'N'])
        freq_tooltip = 'Frequency to conform the data to before computing the statistic.\nB: business day frequency\nC: custom business day frequency (experimental)\nD: calendar day frequency\nW: weekly frequency\nM: month end frequency\nBM: business month end frequency\nCBM: custom business month end frequency\nMS: month start frequency\nBMS: business month start frequency\nCBMS: custom business month start frequency\nQ: quarter end frequency\nBQ: business quarter endfrequency\nQS: quarter start frequency\nBQS: business quarter start frequency\nA: year end frequency\nBA: business year end frequency\nAS: year start frequency\nBAS: business year start frequency\nBH: business hour frequency\nH: hourly frequency\nT: minutely frequency\nS: secondly frequency\nL: milliseonds\nU: microseconds\nN: nanoseconds'
        # how
        how = Str('mean')
        how_list = List(str, ['sum', 'mean', 'std', 'sem', 'max', 'min', 'median', 'first', 'last', 'ohlc'])
        how_tooltip = 'Method for down- or re-sampling.'


    def setInputs(self, dataframe = None, series = None):

        self._dataframe = dataframe
        self._series = series
        self.uiModel = RollingStatistic_Model.ui(window_min = self.window_min,
                                                 window = self.window_min)


    def getOutputs(self):

        try:

            # Assign local variables
            args = {
                'window': self.uiModel.window,
                'min_periods': (None 
                                if not self.uiModel.use_min_periods 
                                else self.uiModel.min_periods),
                'center': self.uiModel.center,
                'freq': (self.uiModel.freq
                         if self.uiModel.resample == True 
                         else None),
                'how': (self.uiModel.how
                        if self.uiModel.resample == True 
                        else None)
                }
            if self._dataframe is not None:
                df_numeric = self._dataframe.select_dtypes(['number'])
                df_object = self._dataframe.select_dtypes(['object'])
                args['arg'] = df_numeric
            else:
                args['arg'] = self._series
                
            # apply function
            func = getattr(pd, self.outputFunction)
            rolling_stat = func(** args)
            
            if self._dataframe is not None:
                df_joined = concat([df_object, rolling_stat], axis = 1)
                df_joined = df_joined[[col for col in self._dataframe.columns]]
                return {'dataframe': df_joined}                
            else:
                return {'series': rolling_stat}

        except Exception as e:

            return self.standard_exception(e)



enamldef RollingStatistic_View(GroupBox): me:

    attr model

    Form:

        Label:
            text = 'Window'
            tool_tip = model.window_tooltip
        IntField:
            value := model.window
            minimum = model.window_min
            tool_tip = model.window_tooltip

        CheckBox:
            tool_tip = model.min_periods_tooltip
            text = 'Min Periods'
            checked := model.use_min_periods
        Label:
            text = 'N/A'
            visible << not model.use_min_periods
        IntField:
            value := model.min_periods
            minimum = model.min_periods_min
            visible << model.use_min_periods
            tool_tip = model.min_periods_tooltip

        Label:
            text = 'Center'
            tool_tip = model.center_tooltip
        CheckBox:
            checked := model.center
            tool_tip = model.center_tooltip

        Label:
            text = 'Resample'
            tool_tip = model.resample_tooltip
        CheckBox:
            checked := model.resample
            tool_tip = model.resample_tooltip

        Conditional:
            condition << model.resample == True
            
            Label:
                text = 'Freq'
                tool_tip = model.freq_tooltip
            ObjectCombo:
                items = model.freq_list
                selected := model.freq
                tool_tip = model.freq_tooltip

            Label:
                text = 'How'
                tool_tip = model.how_tooltip
            ObjectCombo:
                items = model.how_list
                selected := model.how
                tool_tip = model.how_tooltip