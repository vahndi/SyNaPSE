# Atom
from atom.api import Atom, Bool, Int, List, Str, Value

# Enaml
from enaml.widgets.api import CheckBox, Form, GroupBox, Label, ObjectCombo
from custom_views.fields import FloatField, IntField
from enaml.core.api import Conditional
from custom_views.fields import Field
from custom_views.CheckBoxList import CheckBoxList_Model, CheckBoxList_View

from flow_elements.core.ABCs import ABCDataFrameToDataFrame

from pandasFunctions import getRowNames

# Previous elements
from ReadDataFrame import ReadDataFrame_Model


method_tooltips = {'string' : ('select rows whose names start with, ' +
                                'end with, contain or do not contain ' + 
                                'user-specified text'),
                    'regex': ('select rows whose names match a regular ' + 
                              'expression'),
                    'index range': ('select rows whose indices are ' + 
                                    'within an integer range'),
                    'name range': ('select a row range by the first ' +
                                   'and last row names'), 
                   'manual': 'manually select rows from a list', 
                   'head': ('select a specified number of rows from the top ' +
                            'of the dataframe'), 
                   'tail': ('select a specified number of rows from the ' +
                            'bottom of the dataframe'), }


class SelectRows_Model(ABCDataFrameToDataFrame):
    

    elementName = 'Select Rows'
    
    
    class ui(Atom):
        
        # method
        method = Str('string')
        method_list = List(str)
        method_tooltip = Str()
        # starts_with
        starts_with = Str()
        starts_with_tooltip = ('Select rows whose names start with this ' +
                               'text.')
        # ends_with
        ends_with = Str()
        ends_with_tooltip = 'Select rows whose names end with this text.'
        # contains
        contains = Str()
        contains_tooltip = 'Select rows whose names contain this text.'
        # does_not_contain
        does_not_contain = Str()
        does_notcontain_tooltip = ('Select rows whose names do not ' +
                                   'contain this text.')
        # regular expression
        expression = Str()
        expression_tooltip = ('Select rows whose names match this regular' +
                              ' expression.')
        # start index
        range_start_int = Int()
        use_range_start_int = Bool()
        range_start_int_tooltip = ('The 0-based index of the first row to' +
                                   ' select.')
        # end index
        range_end_int = Int()
        use_range_end_int = Bool()
        range_end_int_tooltip = ('1 plus the 0-based index of the last ' +
                                 'row to select.')
        # first and last rows
        fl_rows = List(str)
        # first row name
        first_row_name = Str()
        use_first_row_name = Bool()
        first_row_name_tooltip = 'The name of the first row to select.'
        # last row name
        last_row_name = Str()
        use_last_row_name = Bool() 
        last_row_name_tooltip = 'The name of the last row to select.'
        # manual selection
        manual_rows = Value(Atom)
        manual_rows_tooltip = 'Check row names to select.'
        # head_tail_number
        head_tail_number = Int(10)
        # order_alphabetically
        order_alphabetically = Bool(False)
        order_alphabetically_tooltip = ('Order the returned row names ' +
                                        'alphabetically.')


    def setInputs(self, dataframe):

        self._dataframe = dataframe
        # Limit selection methods based on the dtype of the index
        if dataframe.index.dtype == object:
            method_list = ['string', 'regex', 'index range', 
                           'name range', 'manual', 'head', 'tail']
        else:
            method_list = ['index range', 'manual', 'head', 'tail']
        method_tooltip = '\n'.join(['%s: %s' % (m, method_tooltips[m]) 
                                    for m in method_list])

        self.manual_rows = CheckBoxList_Model(dataframe.index)
        self.uiModel = SelectRows_Model.ui(
                            method_list = method_list,
                            manual_rows = self.manual_rows.uiModel,
                            fl_rows = [str(i) for i in list(dataframe.index)],
                            method_tooltip = method_tooltip
                            )

    
    def getOutputs(self):

        try:
            
            df = self._dataframe            
            
            if self.uiModel.method == 'string':
                
                rows = getRowNames(
                       self._dataframe,
                       startsWith = self.uiModel.starts_with,
                       endsWith = self.uiModel.ends_with,
                       contains = self.uiModel.contains,
                       doesNotContain = self.uiModel.does_not_contain,
                       orderAlphabetically = self.uiModel.order_alphabetically)
                df = df.loc[rows]
                
            elif self.uiModel.method == 'regex':
                
                df = df.filter(regex = self.uiModel.expression,
                               axis = 0)
                if self.uiModel.order_alphabetically:
                    df = df.loc[sorted(list(df.index))]
                    
            elif self.uiModel.method == 'index range':
                
                rs = self.uiModel.range_start_int
                re = self.uiModel.range_end_int
                if (self.uiModel.use_range_start_int and
                    self.uiModel.use_range_end_int):
                        df = df.iloc[rs:re, :]
                elif self.uiModel.use_range_start_int:
                        df = df.iloc[rs:, :]
                elif self.uiModel.use_range_end_int:
                        df = df.iloc[:re, :]

            elif self.uiModel.method == 'name range':
                
                fc = self.uiModel.first_row_name
                lc = self.uiModel.last_row_name
                if (self.uiModel.use_first_row_name and
                    self.uiModel.use_last_row_name):
                        df = df.loc[fc:lc, :]
                elif self.uiModel.use_first_row_name:
                        df = df.loc[fc:, :]
                elif self.uiModel.use_last_row_name:
                        df = df.loc[:lc, :]

            elif self.uiModel.method == 'manual':
                
                df = df.loc[self.manual_rows.getCheckedItemNames()]

            elif self.uiModel.method == 'head':
                
                df = df.head(self.uiModel.head_tail_number)
                
            elif self.uiModel.method == 'tail':
                
                df = df.tail(self.uiModel.head_tail_number)
            
            # sort, if specified
            if self.uiModel.order_alphabetically:
                df = df[sorted(list(df.index))]

            return {'dataframe': df}
            
        except Exception as e:
            
            return self.standard_exception(e)



enamldef SelectRows_View(GroupBox): me:

    attr model

    Form:

        Label:
            text = 'Method'
        ObjectCombo:
            items = model.method_list
            selected := model.method


        Conditional:
            condition << (model.method == 'string' and 
                          'string' in model.method_list)
            
            Label:
                text = 'Starts With'
                tool_tip = model.starts_with_tooltip
            Field:
                text := model.starts_with
                tool_tip = model.starts_with_tooltip

            Label:
                text = 'Ends With'
                tool_tip = model.ends_with_tooltip
            Field:
                text := model.ends_with
                tool_tip = model.ends_with_tooltip

            Label:
                text = 'Contains'
                tool_tip = model.contains_tooltip
            Field:
                text := model.contains
                tool_tip = model.contains_tooltip

            Label:
                text = 'Does Not Contain'
                tool_tip = model.does_not_contain_tooltip
            Field:
                text := model.does_not_contain
                tool_tip = model.does_not_contain_tooltip    


        Conditional:
            condition << (model.method == 'regex' and 
                          'regex' in model.method_list)

            Label:
                text = 'Expression'
                tool_tip = model.expression_tooltip
            Field:
                text := model.expression
                tool_tip = model.expression_tooltip


        Conditional:
            condition << model.method == 'index range'
            
            CheckBox: 
                text = 'Lower Index (inclusive)'
                checked := model.use_range_start_int
                tool_tip = model.range_start_int_tooltip
            Label:
                text = 'N/A'
                visible << not model.use_range_start_int
                
            IntField:
                value := model.range_start_int
                minimum = 0
                maximum = len(model.fl_rows)
                visible << model.use_range_start_int
                tool_tip = model.range_start_int_tooltip
                
            CheckBox:
                text = 'Upper Index (exclusive)'
                checked := model.use_range_end_int
                tool_tip = model.range_end_int_tooltip
            Label:
                text = 'N/A'
                visible << not model.use_range_end_int
            IntField:
                value := model.range_end_int
                minimum = 0
                maximum = len(model.fl_rows)
                visible << model.use_range_end_int
                tool_tip = model.range_end_int_tooltip


        Conditional:
            condition << (model.method == 'name range' and
                          'name range' in model.method_list)
            
            CheckBox: 
                text = 'First Name'
                checked := model.use_first_row_name
                tool_tip = model.first_row_name_tooltip
            Label:
                text = 'N/A'
                visible << not model.use_first_row_name
            ObjectCombo:
                items = model.fl_rows
                selected := model.first_row_name
                visible << model.use_first_row_name
                tool_tip = model.first_row_name_tooltip
                

            CheckBox:
                text = 'Last Name'
                checked := model.use_last_row_name
                tool_tip = model.last_row_name_tooltip
            Label:
                text = 'N/A'
                visible << not model.use_last_row_name
            ObjectCombo:
                items = model.fl_rows
                selected := model.last_row_name
                visible << model.use_last_row_name
                tool_tip = model.last_row_name_tooltip


        Conditional:
            condition << model.method == 'manual'

            Label:
                text = 'Rows'
                tool_tip = model.manual_rows_tooltip
            CheckBoxList_View:
                model := me.model.manual_rows
                tool_tip = model.manual_rows_tooltip
        
        Conditional:
            condition << model.method in ('head', 'tail')
            
            Label:
                text = '# Rows'
            IntField:
                minimum = 1
                value := model.head_tail_number

        Label:
            text = 'Order Alphabetically'
            tool_tip = model.order_alphabetically_tooltip
        CheckBox:
            checked := model.order_alphabetically
            tool_tip = model.order_alphabetically_tooltip
