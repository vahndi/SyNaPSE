# Atom
from atom.api import Atom, Float, Int, List, Str

# Enaml
from enaml.core.api import Conditional
from custom_views.fields import IntField, FloatField
from enaml.widgets.api import Container, Form, Label, ObjectCombo, Page



class Leaves_Model(object):
    
    class ui(Atom):
        
        # max_depth_type
        max_depth_type = Str()
        max_depth_type_list = List(str, ['auto', 'int'])
        # max_depth_int
        max_depth_int = Int()
        
        # max_leaf_nodes_type
        max_leaf_nodes_type = Str()
        max_leaf_nodes_type_list = List(str, ['unlimited', 'int'])
        # max_leaf_nodes
        max_leaf_nodes = Int()

        # min_leaf_samples
        min_leaf_samples = Int()
        
        # min_split_samples
        min_split_samples = Int()
        
        # min_leaf_weighted_fraction
        min_leaf_weighted_fraction = Float()

    def __init__(self, 
                 max_depth_type = 'auto',
                 max_depth_int = 10,
                 max_leaf_nodes_type = 'unlimited',
                 max_leaf_nodes = 10,
                 min_leaf_samples = 1,
                 min_split_samples = 2,
                 min_leaf_weighted_fraction = 0.0):
        
        self.uiModel = Leaves_Model.ui(
                    max_depth_type = max_depth_type,
                    max_depth_int = max_depth_int,
                    max_leaf_nodes_type = max_leaf_nodes_type,
                    max_leaf_nodes = max_leaf_nodes,
                    min_leaf_samples = min_leaf_samples,
                    min_split_samples = min_split_samples,
                    min_leaf_weighted_fraction = min_leaf_weighted_fraction)

    def max_depth(self):

        max_depth_type = None        
        if self.uiModel.max_leaf_nodes_type == 'unlimited':
            max_depth_type = self.uiModel.max_depth_type
        max_depth = None
        if max_depth_type == 'int':
            max_depth = self.uiModel.max_depth_int
        return max_depth

    def max_leaf_nodes(self):

        max_leaf_nodes = None        
        if self.uiModel.max_leaf_nodes_type == 'int':
            max_leaf_nodes = self.uiModel.max_leaf_nodes
        return max_leaf_nodes

    def min_leaf_samples(self):
        
        return self.uiModel.min_leaf_samples

    def min_split_samples(self):
        
        return self.uiModel.min_split_samples

    def min_leaf_weighted_fraction(self):
        
        return self.uiModel.min_leaf_weighted_fraction



enamldef Leaves_View(Container):
    
    attr model
    
    Form:
        
        Label:
            text = 'Max Leaf Nodes Type'
        ObjectCombo:
            items = model.max_leaf_nodes_type_list
            selected := model.max_leaf_nodes_type
    
        Conditional:
            condition << model.max_leaf_nodes_type == 'int'
            Label:
                text = 'Max Leaf Nodes'
            IntField:
                value := model.max_leaf_nodes
    
        Conditional:
            condition << model.max_leaf_nodes_type == 'unlimited'
            Label:
                text = 'Max Depth Type'
            ObjectCombo:
                items = model.max_depth_type_list
                selected := model.max_depth_type
    
        Conditional:
            condition << model.max_depth_type == 'int'
            Label:
                text = 'Max Depth Int'
            IntField:
                value := model.max_depth_int
    
        Label:
            text = 'Min Split Samples'
        IntField:
            value := model.min_split_samples
    
        Label:
            text = 'Min Leaf Samples'
        IntField:
            value := model.min_leaf_samples
    
        Label:
            text = 'Min Leaf Weighted Fraction'
        FloatField:
            value := model.min_leaf_weighted_fraction