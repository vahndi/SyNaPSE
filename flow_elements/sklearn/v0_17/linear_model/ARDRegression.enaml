# Atom
from atom.api import Atom, Bool, Float, Int, Value

# Enaml
from enaml.widgets.api import CheckBox, Form, GroupBox, Label, Notebook, Page
from custom_views.fields import FloatField, IntField
from custom_views.InputsTargetsSelector import InputsTargetsSelector_View

# Models
from .base.regression_model import ABCRegressionModel
from sklearn.linear_model import ARDRegression



class ARDRegression_Model(ABCRegressionModel):


    elementName = 'ARD Regression'
    elementDescription = 'Bayesian ARD regression.'
    elementDocumentation = ABCRegressionModel.doc_root + 'ARDRegression.html'


    class ui(Atom):

        input_selector = Value(Atom)
        n_iter = Int(300)
        tol = Float(0.001)
        alpha_1 = Float(1e-06)
        alpha_2 = Float(1e-06)
        lambda_1 = Float(1e-06)
        lambda_2 = Float(1e-06)
        compute_score = Bool(False)
        threshold_lambda = Float(10000.0)
        fit_intercept = Bool(True)
        normalize = Bool(False)
        copy_X = Bool(True)
        verbose = Bool(False)


    def setInputs(self, dataFrame):
        
        self.set_inputs(dataFrame)
        self.uiModel = ARDRegression_Model.ui(
                            input_selector = self.input_selector.uiModel
                            )


    def getOutputs(self):

        try:
            
            # Assign local variables
            args = {'n_iter': self.uiModel.n_iter,
                    'tol': self.uiModel.tol,
                    'alpha_1': self.uiModel.alpha_1,
                    'alpha_2': self.uiModel.alpha_2,
                    'lambda_1': self.uiModel.lambda_1,
                    'lambda_2': self.uiModel.lambda_2,
                    'compute_score': self.uiModel.compute_score,
                    'threshold_lambda': self.uiModel.threshold_lambda,
                    'fit_intercept': self.uiModel.fit_intercept,
                    'normalize': self.uiModel.normalize,
                    'copy_X': self.uiModel.copy_X,
                    'verbose': self.uiModel.verbose}
            
            # Validate inputs
            if not self.input_selector.validate_inputs():
                return {'Outputs': 'No Outputs'}  
    
            # Create ARD Regression model
            self.estimator = ARDRegression(**args)
            self.train_test_model()

            # Return outputs
            attributes = self.get_attributes()
            metrics = self.get_metrics()
            
            return {'Attributes': attributes,
                    'Metrics': metrics,
                    'dataFrame': self.df_predictions,
                    'Target vs. Predicted': self.df_targets_predictions}

        except Exception as e:

            return self.standard_exception(e)

        

enamldef ARDRegression_View(GroupBox): me:

    attr model

    Notebook:

        Page:

            title = 'Inputs'
            closable = False

            InputsTargetsSelector_View:
                model := me.model.input_selector

        Page:

            title = 'Model'
            closable = False

            Form:

                Label:
                    text = 'Max Iterations'
                IntField:
                    value := model.n_iter

                Label:
                    text = 'Stopping Tolerance'
                FloatField:
                    value := model.tol

                Label:
                    text = 'Alpha 1'
                FloatField:
                    value := model.alpha_1

                Label:
                    text = 'Alpha 2'
                FloatField:
                    value := model.alpha_2

                Label:
                    text = 'Lambda 1'
                FloatField:
                    value := model.lambda_1

                Label:
                    text = 'Lambda 2'
                FloatField:
                    value := model.lambda_2

                Label:
                    text = 'Compute Score'
                CheckBox:
                    checked := model.compute_score
                    
                Label:
                    text = 'Threshold Lambda'
                FloatField:
                    value := model.threshold_lambda

                Label:
                    text = 'Fit Intercept'
                CheckBox:
                    checked := model.fit_intercept

                Label:
                    text = 'Normalize'
                CheckBox:
                    checked := model.normalize

                Label:
                    text = 'Copy X'
                CheckBox:
                    checked := model.copy_X

                Label:
                    text = 'Verbose'
                CheckBox:
                    checked := model.verbose