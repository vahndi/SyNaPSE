# Atom
from atom.api import Atom, Bool, Float, Int, List, Str, Value


# Enaml
from enaml.widgets.api import CheckBox, Form, GroupBox, Label, Notebook, ObjectCombo, Page
from custom_views.fields import FloatField, IntField
from custom_views.InputsTargetsSelector import InputsTargetsSelector_View

# Models
from .base.regression_model import ABCRegressionModel
from sklearn.linear_model import PassiveAggressiveRegressor



class PassiveAggressiveRegressor_Model(ABCRegressionModel):


    elementName = 'Passive Aggressive Regressor'
    elementDescription = 'Passive Aggressive Regressor.'
    elementDocumentation = ABCRegressionModel.doc_root + \
                           'PassiveAggressiveRegressor.html'

    class ui(Atom):

        input_selector = Value(Atom)

        # C
        C = Float(1)
        # epsilon
        epsilon = Float(0.1)
        epsilon_min = Float(0)
        # fit_intercept
        fit_intercept = Bool(True)
        # n_iter
        n_iter = Int(5)
        n_iter_min = Int(1)
        # shuffle
        shuffle = Bool(True)
        # random_state
        random_state = Int(1)
        # verbose
        verbose = Bool(False)
        # loss
        loss = Str('epsilon_insensitive')
        loss_list = List(str, ['epsilon_insensitive', 'squared_epsilon_insensitive'])
        # warm_start
        warm_start = Bool(False)


    def setInputs(self, dataframe):

        self.set_inputs(dataframe)
        self.uiModel = PassiveAggressiveRegressor_Model.ui(
                            input_selector = self.input_selector.uiModel
                            )


    def getOutputs(self):

        try:

            # Assign local variables
            args = {'C': self.uiModel.C,
                    'epsilon': self.uiModel.epsilon,
                    'fit_intercept': self.uiModel.fit_intercept,
                    'n_iter': self.uiModel.n_iter,
                    'shuffle': self.uiModel.shuffle,
                    'random_state': self.uiModel.random_state,
                    'verbose': self.uiModel.verbose,
                    'loss': self.uiModel.loss,
                    'warm_start': self.uiModel.warm_start}

            # Validate inputs
            if not self.input_selector.validate_inputs():
                return {'Outputs': 'No Outputs'}  
    
            # Create Passive Aggressive Regression model
            self.estimator = PassiveAggressiveRegressor(**args)
            self.train_test_model()

            # Return outputs
            attributes = self.get_attributes()
            metrics = self.get_metrics()
            
            return {'Attributes': attributes,
                    'Metrics': metrics,
                    'dataframe': self.df_predictions,
                    'Target vs. Predicted': self.df_targets_predictions}

        except Exception as e:

            return self.standard_exception(e)



enamldef PassiveAggressiveRegressor_View(GroupBox): me:

    attr model

    Notebook:
        
        Page:

            title = 'Inputs'
            closable = False

            InputsTargetsSelector_View:
                model := me.model.input_selector

        Page:

            title = 'Model'
            closable = False

            Form:

                Label:
                    text = 'C'
                FloatField:
                    value := model.C

                Label:
                    text = 'Epsilon'
                FloatField:
                    value := model.epsilon
                    minimum = model.epsilon_min

                Label:
                    text = 'Fit Intercept'
                CheckBox:
                    checked := model.fit_intercept

                Label:
                    text = 'N Iter'
                IntField:
                    value := model.n_iter
                    minimum = model.n_iter_min

                Label:
                    text = 'Shuffle'
                CheckBox:
                    checked := model.shuffle

                Label:
                    text = 'Random State'
                IntField:
                    value := model.random_state

                Label:
                    text = 'Verbose'
                CheckBox:
                    checked := model.verbose

                Label:
                    text = 'Loss'
                ObjectCombo:
                    items = model.loss_list
                    selected := model.loss

                Label:
                    text = 'Warm Start'
                CheckBox:
                    checked := model.warm_start