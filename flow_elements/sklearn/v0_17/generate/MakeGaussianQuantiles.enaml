# Atom
from atom.api import Atom, Bool, Float, Int


# Enaml
from enaml.widgets.api import CheckBox, Form, GroupBox, Label, Notebook, Page
from custom_views.fields import FloatField, IntField

# Models
from ._base.ClassificationGenerator import LabelClassificationGenerator
from sklearn.datasets import make_gaussian_quantiles


class MakeGaussianQuantiles_Model(LabelClassificationGenerator):


    elementName = 'Make Gaussian Quantiles'


    class ui(Atom):

        # n_samples
        n_samples = Int(100)
        n_samples_min = Int(1)
        n_samples_tooltip = 'The total number of points equally divided among classes.'
        # n_features
        n_features = Int(2)
        n_features_min = Int(1)
        n_features_tooltip = 'The number of features for each sample.'
        # n_classes
        n_classes = Int(3)
        n_classes_min = Int(1)
        n_classes_tooltip = 'The number of classes.'
        # cov
        cov = Float()
        cov_tooltip = 'The covariance matrix will be this value times the unit matrix. \nThis dataset only produces symmetric normal distributions.'
        # shuffle
        shuffle = Bool(True)
        shuffle_tooltip = 'Shuffle the samples.'
        # random_state
        random_state = Int(1)
        use_random_state = Bool()
        random_state_tooltip = 'The random state seed.'


    def __init__(self):
        
        self.uiModel = MakeGaussianQuantiles_Model.ui()
        self.outputFunction = make_gaussian_quantiles


    def getArgs(self):
        
        return {
            'n_samples': self.uiModel.n_samples,
            'n_features': self.uiModel.n_features,
            'n_classes': self.uiModel.n_classes,
            'cov': self.uiModel.cov,
            'shuffle': self.uiModel.shuffle,
            'random_state': (None 
                             if not self.uiModel.use_random_state 
                             else self.uiModel.random_state)
            }



enamldef MakeGaussianQuantiles_View(GroupBox): me:

    attr model

    Form:

        Label:
            text = '# Samples'
            tool_tip = model.n_samples_tooltip
        IntField:
            value := model.n_samples
            minimum = model.n_samples_min
            tool_tip = model.n_samples_tooltip

        Label:
            text = '# Features'
            tool_tip = model.n_features_tooltip
        IntField:
            value := model.n_features
            minimum = model.n_features_min
            tool_tip = model.n_features_tooltip

        Label:
            text = '# Classes'
            tool_tip = model.n_classes_tooltip
        IntField:
            value := model.n_classes
            minimum = model.n_classes_min
            tool_tip = model.n_classes_tooltip

        Label:
            text = 'Covariance'
            tool_tip = model.cov_tooltip
        FloatField:
            value := model.cov
            tool_tip = model.cov_tooltip

        Label:
            text = 'Shuffle'
            tool_tip = model.shuffle_tooltip
        CheckBox:
            checked := model.shuffle
            tool_tip = model.shuffle_tooltip

        CheckBox:
            tool_tip = model.random_state_tooltip
            text = 'Random State'
            checked := model.use_random_state
        Label:
            text = 'N/A'
            visible << not model.use_random_state
        IntField:
            value := model.random_state
            visible << model.use_random_state
            tool_tip = model.random_state_tooltip