# Atom
from atom.api import Atom, Bool, Float, Int

# Enaml
from enaml.widgets.api import CheckBox, Form, GroupBox, Label, Notebook, Page
from custom_views.fields import FloatField, IntField

# Models
from flow_elements.core.ABCs import ABCOutputsDataFrame

from sklearn.datasets import make_biclusters
from pandas import DataFrame



class MakeBiClusters_Model(ABCOutputsDataFrame):


    elementName = 'Make Bi-Clusters'


    class ui(Atom):

        # shape_rows
        shape_rows = Int(1000)
        shape_rows_tooltip = 'The number of samples to generate.'
        # shape_cols
        shape_cols = Int(2)
        shape_cols_tooltip = 'The number of dimensions of each sample.'
        # n_clusters
        n_clusters = Int(5)
        n_clusters_tooltip = 'The number of biclusters.'
        # noise
        noise = Float(0)
        use_noise = Bool()
        noise_tooltip = 'The standard deviation of the gaussian noise.'
        # minval
        minval = Int(10)
        use_minval = Bool()
        minval_tooltip = 'Minimum value of a bicluster.'
        # maxval
        maxval = Int(100)
        use_maxval = Bool()
        maxval_tooltip = 'Maximum value of a bicluster.'
        # shuffle
        shuffle = Bool(True)
        shuffle_tooltip = 'Shuffle the samples.'
        # random_state
        random_state = Int(1)
        use_random_state = Bool()
        random_state_tooltip = 'The random state seed.'


    def __init__(self):
        
        self.uiModel = MakeBiClusters_Model.ui()
        

    def getOutputs(self):

        try:

            # Assign local variables
            args = {
                'shape': (self.uiModel.shape_rows,
                          self.uiModel.shape_cols),
                'n_clusters': self.uiModel.n_clusters,
                'noise': (None 
                          if not self.uiModel.use_noise 
                          else self.uiModel.noise),
                'minval': (None 
                           if not self.uiModel.use_minval 
                           else self.uiModel.minval),
                'maxval': (None 
                           if not self.uiModel.use_maxval 
                           else self.uiModel.maxval),
                'shuffle': self.uiModel.shuffle,
                'random_state': (None 
                                 if not self.uiModel.use_random_state 
                                 else self.uiModel.random_state)
                }
                
            X, rows, cols = make_biclusters(** args)
            dataframe = DataFrame(X)
            dataframe.columns = ['X%i' % i 
                                 for i in range(self.uiModel.shape_cols)]
            
            return {'dataframe': dataframe}

        except Exception as e:

            return self.standard_exception(e)



enamldef MakeBiClusters_View(GroupBox):

    attr model

    Form:

        Label:
            text = 'Shape Rows'
            tool_tip = model.shape_rows_tooltip
        IntField:
            value := model.shape_rows
            tool_tip = model.shape_rows_tooltip

        Label:
            text = 'Shape Cols'
            tool_tip = model.shape_cols_tooltip
        IntField:
            value := model.shape_cols
            tool_tip = model.shape_cols_tooltip

        Label:
            text = 'N Clusters'
            tool_tip = model.n_clusters_tooltip
        IntField:
            value := model.n_clusters
            tool_tip = model.n_clusters_tooltip

        CheckBox:
            tool_tip = model.noise_tooltip
            text = 'Noise'
            checked := model.use_noise
        Label:
            text = 'N/A'
            visible << not model.use_noise
        FloatField:
            value := model.noise
            visible << model.use_noise
            tool_tip = model.noise_tooltip

        CheckBox:
            tool_tip = model.minval_tooltip
            text = 'Minval'
            checked := model.use_minval
        Label:
            text = 'N/A'
            visible << not model.use_minval
        IntField:
            value := model.minval
            visible << model.use_minval
            tool_tip = model.minval_tooltip

        CheckBox:
            tool_tip = model.maxval_tooltip
            text = 'Maxval'
            checked := model.use_maxval
        Label:
            text = 'N/A'
            visible << not model.use_maxval
        IntField:
            value := model.maxval
            visible << model.use_maxval
            tool_tip = model.maxval_tooltip

        Label:
            text = 'Shuffle'
            tool_tip = model.shuffle_tooltip
        CheckBox:
            checked := model.shuffle
            tool_tip = model.shuffle_tooltip

        CheckBox:
            tool_tip = model.random_state_tooltip
            text = 'Random State'
            checked := model.use_random_state
        Label:
            text = 'N/A'
            visible << not model.use_random_state
        IntField:
            value := model.random_state
            visible << model.use_random_state
            tool_tip = model.random_state_tooltip