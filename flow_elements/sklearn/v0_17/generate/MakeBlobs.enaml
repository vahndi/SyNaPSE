# Atom
from atom.api import Atom, Bool, Float, Int

# Enaml
from enaml.core.api import Conditional
from enaml.widgets.api import CheckBox, Form, GroupBox, Label, Notebook, Page
from custom_views.fields import FloatField, IntField

# Models
from _base.ClassificationGenerator import LabelClassificationGenerator
from sklearn.datasets import make_blobs



class MakeBlobs_Model(LabelClassificationGenerator):


    elementName = 'Make Blobs'


    class ui(Atom):

        # n_samples
        n_samples = Int(100)
        n_samples_tooltip = 'The total number of points equally divided among clusters.'
        # n_features
        n_features = Int(2)
        n_features_tooltip = 'The number of features for each sample.'
        # centers
        centers = Int(5)
        use_centers = Bool(True)
        centers_tooltip = 'The number of centers to generate.'
        # cluster_std
        cluster_std = Float(1.0)
        use_cluster_std = Bool(True)
        cluster_std_tooltip = 'The standard deviation of the clusters.'
        # center_box_min
        center_box_min = Float(-10.0)
        center_box_min_tooltip = 'The lower bound of the bounding box.'
        # center_box_max
        center_box_max = Float(10.0)
        center_box_max_tooltip = 'The upper bound of the bounding box.'
        # shuffle
        shuffle = Bool(True)
        shuffle_tooltip = 'Shuffle the samples.'
        # random_state
        random_state = Int(1)
        use_random_state = Bool()
        random_state_tooltip = 'The random state seed.'


    def __init__(self):
        
        self.uiModel = MakeBlobs_Model.ui()
        self.outputFunction = make_blobs


    def getArgs(self):
        
        return {
            'n_samples': self.uiModel.n_samples,
            'n_features': self.uiModel.n_features,
            'centers': (None 
                        if not self.uiModel.use_centers 
                        else self.uiModel.centers),
            'cluster_std': (None 
                            if not self.uiModel.use_cluster_std 
                            else self.uiModel.cluster_std),
            'center_box': (self.uiModel.center_box_min,
                           self.uiModel.center_box_max),
            'shuffle': self.uiModel.shuffle,
            'random_state': (None 
                             if not self.uiModel.use_random_state 
                             else self.uiModel.random_state)
            }



enamldef MakeBlobs_View(GroupBox): me:

    attr model

    Form:

        Label:
            text = 'N Samples'
            tool_tip = model.n_samples_tooltip
        IntField:
            value := model.n_samples
            tool_tip = model.n_samples_tooltip

        Label:
            text = 'N Features'
            tool_tip = model.n_features_tooltip
        IntField:
            value := model.n_features
            tool_tip = model.n_features_tooltip

        CheckBox:
            tool_tip = model.centers_tooltip
            text = 'Centers'
            checked := model.use_centers
        Label:
            text = 'N/A'
            visible << not model.use_centers
        IntField:
            value := model.centers
            visible << model.use_centers
            tool_tip = model.centers_tooltip

        CheckBox:
            tool_tip = model.cluster_std_tooltip
            text = 'Cluster Std'
            checked := model.use_cluster_std
        Label:
            text = 'N/A'
            visible << not model.use_cluster_std
        FloatField:
            value := model.cluster_std
            visible << model.use_cluster_std
            tool_tip = model.cluster_std_tooltip


        Label:
            text = 'Center Box Min'
            tool_tip = model.center_box_min_tooltip
        FloatField:
            value := model.center_box_min
            tool_tip = model.center_box_min_tooltip
    
        Label:
            text = 'Center Box Max'
            tool_tip = model.center_box_max_tooltip
        FloatField:
            value := model.center_box_max
            tool_tip = model.center_box_max_tooltip
    

        Label:
            text = 'Shuffle'
            tool_tip = model.shuffle_tooltip
        CheckBox:
            checked := model.shuffle
            tool_tip = model.shuffle_tooltip

        CheckBox:
            tool_tip = model.random_state_tooltip
            text = 'Random State'
            checked := model.use_random_state
        Label:
            text = 'N/A'
            visible << not model.use_random_state
        IntField:
            value := model.random_state
            visible << model.use_random_state
            tool_tip = model.random_state_tooltip