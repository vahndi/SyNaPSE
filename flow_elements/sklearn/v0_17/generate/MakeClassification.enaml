# Atom
from atom.api import Atom, Bool, Float, Int


# Enaml
from enaml.widgets.api import CheckBox, Form, GroupBox, Label, Notebook, Page
from custom_views.fields import FloatField, IntField

# Models
from _base.ClassificationGenerator import ClassificationGenerator
from sklearn.datasets import make_classification



class MakeClassification_Model(ClassificationGenerator):


    elementName = 'Make Classification'


    class ui(Atom):

        # n_samples
        n_samples = Int(100)
        n_samples_min = Int(1)
        n_samples_tooltip = 'The total number of points generated.'
        # n_features
        n_features = Int(20)
        n_features_min = Int(1)
        n_features_tooltip = 'The total number of features. These comprise:\nn_informative informative features, \nn_redundant redundant features, \nn_repeated duplicated features, and \nn_features-n_informative-n_redundant- n_repeated useless features drawn at random.'
        # n_informative
        n_informative = Int(2)
        n_informative_min = Int(0)
        n_informative_tooltip = 'The number of informative features.\nEach class is composed of a number of gaussian clusters each located around the vertices of a hypercube in a subspace of dimension n_informative. \nFor each cluster, informative features are drawn independently from N(0, 1) and then randomly linearly combined within each cluster in order to add covariance. \nThe clusters are then placed on the vertices of the hypercube.'
        # n_redundant
        n_redundant = Int(2)
        n_redundant_min = Int(0)
        n_redundant_tooltip = 'The number of redundant features. \nThese features are generated as random linear combinations of the informative features.'
        # n_repeated
        n_repeated = Int(0)
        n_repeated_min = Int(0)
        n_repeated_tooltip = 'The number of duplicated features, drawn randomly from the informative and the redundant features.'
        # n_classes
        n_classes = Int(2)
        n_classes_min = Int(0)
        n_classes_tooltip = 'The number of classes (or labels) of the classification problem.'
        # n_clusters_per_class
        n_clusters_per_class = Int(2)
        n_clusters_per_class_min = Int(0)
        n_clusters_per_class_tooltip = 'The number of clusters per class.'
        # flip_y
        flip_y = Float(0.01)
        flip_y_min = Float(0)
        flip_y_max = Float(1)
        flip_y_tooltip = 'The fraction of samples whose class are randomly exchanged.'
        # class_sep
        class_sep = Float(1.0)
        class_sep_tooltip = 'The factor multiplying the hypercube dimension.'
        # hypercube
        hypercube = Bool(True)
        hypercube_tooltip = 'If True, the clusters are put on the vertices of a hypercube. \nIf False, the clusters are put on the vertices of a random polytope.'
        # shift
        shift = Float(0.0)
        use_shift = Bool(True)
        shift_tooltip = 'Shift features by the specified value. \nIf None, then features are shifted by a random value drawn in [-class_sep, class_sep].'
        # scale
        scale = Float(1.0)
        use_scale = Bool(True)
        scale_tooltip = 'Multiply features by the specified value. \nIf None, then features are scaled by a random value drawn in [1, 100]. \nNote that scaling happens after shifting.'
        # shuffle
        shuffle = Bool(True)
        shuffle_tooltip = 'Shuffle the samples and the features.'
        # random_state
        random_state = Int(1)
        use_random_state = Bool(True)
        random_state_tooltip = 'The random state seed.'


    def __init__(self):
        
        self.uiModel = MakeClassification_Model.ui()
        self.outputFunction = make_classification
    
    
    def getArgs(self):
        
        return {
            'n_samples': self.uiModel.n_samples,
            'n_features': self.uiModel.n_features,
            'n_informative': self.uiModel.n_informative,
            'n_redundant': self.uiModel.n_redundant,
            'n_repeated': self.uiModel.n_repeated,
            'n_classes': self.uiModel.n_classes,
            'n_clusters_per_class': self.uiModel.n_clusters_per_class,
            'flip_y': self.uiModel.flip_y,
            'class_sep': self.uiModel.class_sep,
            'hypercube': self.uiModel.hypercube,
            'shift': (None 
                     if not self.uiModel.use_shift 
                     else self.uiModel.shift),
            'scale': (None 
                      if not self.uiModel.use_scale 
                      else self.uiModel.scale),
            'shuffle': self.uiModel.shuffle,
            'random_state': (None 
                             if not self.uiModel.use_random_state 
                             else self.uiModel.random_state)
            }



enamldef MakeClassification_View(GroupBox): me:

    attr model

    Form:

        Label:
            text = 'N Samples'
            tool_tip = model.n_samples_tooltip
        IntField:
            value := model.n_samples
            minimum = model.n_samples_min
            tool_tip = model.n_samples_tooltip

        Label:
            text = 'N Features'
            tool_tip = model.n_features_tooltip
        IntField:
            value := model.n_features
            minimum = model.n_features_min
            tool_tip = model.n_features_tooltip

        Label:
            text = 'N Informative'
            tool_tip = model.n_informative_tooltip
        IntField:
            value := model.n_informative
            minimum = model.n_informative_min
            tool_tip = model.n_informative_tooltip

        Label:
            text = 'N Redundant'
            tool_tip = model.n_redundant_tooltip
        IntField:
            value := model.n_redundant
            minimum = model.n_redundant_min
            tool_tip = model.n_redundant_tooltip

        Label:
            text = 'N Repeated'
            tool_tip = model.n_repeated_tooltip
        IntField:
            value := model.n_repeated
            minimum = model.n_repeated_min
            tool_tip = model.n_repeated_tooltip

        Label:
            text = 'N Classes'
            tool_tip = model.n_classes_tooltip
        IntField:
            value := model.n_classes
            minimum = model.n_classes_min
            tool_tip = model.n_classes_tooltip

        Label:
            text = 'N Clusters Per Class'
            tool_tip = model.n_clusters_per_class_tooltip
        IntField:
            value := model.n_clusters_per_class
            minimum = model.n_clusters_per_class_min
            tool_tip = model.n_clusters_per_class_tooltip

        Label:
            text = 'Flip Y'
            tool_tip = model.flip_y_tooltip
        FloatField:
            value := model.flip_y
            minimum = model.flip_y_min
            maximum = model.flip_y_max
            tool_tip = model.flip_y_tooltip

        Label:
            text = 'Class Sep'
            tool_tip = model.class_sep_tooltip
        FloatField:
            value := model.class_sep
            tool_tip = model.class_sep_tooltip

        Label:
            text = 'Hypercube'
            tool_tip = model.hypercube_tooltip
        CheckBox:
            checked := model.hypercube
            tool_tip = model.hypercube_tooltip

        CheckBox:
            tool_tip = model.shift_tooltip
            text = 'Shift'
            checked := model.use_shift
        Label:
            text = 'N/A'
            visible << not model.use_shift
        FloatField:
            value := model.shift
            visible << model.use_shift
            tool_tip = model.shift_tooltip

        CheckBox:
            tool_tip = model.scale_tooltip
            text = 'Scale'
            checked := model.use_scale
        Label:
            text = 'N/A'
            visible << not model.use_scale
        FloatField:
            value := model.scale
            visible << model.use_scale
            tool_tip = model.scale_tooltip

        Label:
            text = 'Shuffle'
            tool_tip = model.shuffle_tooltip
        CheckBox:
            checked := model.shuffle
            tool_tip = model.shuffle_tooltip

        CheckBox:
            tool_tip = model.random_state_tooltip
            text = 'Random State'
            checked := model.use_random_state
        Label:
            text = 'N/A'
            visible << not model.use_random_state
        IntField:
            value := model.random_state
            visible << model.use_random_state
            tool_tip = model.random_state_tooltip