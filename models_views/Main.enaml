# Atom
from atom.api import Atom, Dict, Str, Value

# Enaml
from enaml.widgets.api import MainWindow

# Subviews
from Menu import Menu_View
from CalculationGraph import CalculationGraph_Model, CalculationGraph_View
from CalculationConfig import CalculationConfig_View
from CalculationOutput import CalculationOutput_Model, CalculationOutput_View
from ChooseCalculation import ChooseCalculation_Model

# Other
from modules.startup import calculation_models
from modules.startup import _pickle_method, _unpickle_method
from modules.startup import menus_calcs
from calculation import CalculationTypeManager

import networkx as nx



class Main_Model(Atom):
    '''
    The Main Model class.
    
    Class Attributes
    ----------------
    calculation_models:
        A list of all the calculation models available to the program.

    Instance Attributes
    -------------------
    calc_dict (dict):
        A dict mapping the calculation names to their respective models.
    
    '''
    calc_models = calculation_models
    calc_file_path = Str()
    calc_dict = Dict()
    calcGraph_Model = Value(CalculationGraph_Model)
    calcOutput_Model = Value(CalculationOutput_Model)
    calcTypeManager = Value(CalculationTypeManager)
    menu_dict = Dict()


    def __init__(self):

        self.calc_dict = {cm.calc_name: cm 
                          for cm in Main_Model.calc_models}                     
        self.menu_dict = menus_calcs
        self._initialise()


    def _initialise(self, calc_graph = None):
        
        self.calcTypeManager = CalculationTypeManager(
                                   calc_types = Main_Model.calc_models
                                   )

        self.calcGraph_Model = CalculationGraph_Model(
                                    parent = self,
                                    calc_dict = self.calc_dict,
                                    calc_graph = calc_graph
                                    )
            
        self.calcOutput_Model = CalculationOutput_Model(
                                    calculationGraph = self.calcGraph_Model
                                    )


    def update_choosable_calc_types(self, preceding_calc_types):
        
        self.calcTypeManager.selected_calc_types = preceding_calc_types


    def load_graph(self, load_path):
        
        if load_path:
        
            calc_graph = nx.read_gpickle(load_path)
            self._initialise(calc_graph = calc_graph)
            self.calc_file_path = load_path
            # Need to call this twice to enable picking straight away
            # TODO: find out why and fix it
            self.calcGraph_Model.draw_graph_figure()
            self.calcGraph_Model.draw_graph_figure()


    def save_graph(self):
        
        nx.write_gpickle(self.calcGraph_Model.calc_graph(), 
                         self.calc_file_path)

        
    def save_graph_as(self, save_path):
        
        nx.write_gpickle(self.calcGraph_Model.calc_graph(), 
                         save_path)
        self.calc_file_path = save_path


    
enamldef Main_View(MainWindow): me:


    attr model = Main_Model()


    title = 'SyNaPSE'


    Menu_View:

        model << me.model


    CalculationGraph_View:

        model << me.model.calcGraph_Model


    CalculationConfig_View:

        model := me.model.calcGraph_Model.uiModel.selected_calc_item


    CalculationOutput_View:

        calc_outputs << me.model.calcOutput_Model.uiModel.calc_outputs
        recalculate_func << me.model.calcOutput_Model.calculate_output
