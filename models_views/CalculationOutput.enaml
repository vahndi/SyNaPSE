# Atom
from atom.api import Atom, Callable, Dict, Value

# Enaml
from enaml.core.api import Conditional, DynamicTemplate, Looper
from enaml.widgets.api import (
    Container, DockPane, GroupBox, Html, Notebook, MPLCanvas, 
    MultilineField, Page, PushButton, ScrollArea
    )
from custom_views.fields import Field

# Numerical
import pandas as pd
from pandas import DataFrame, Series, Index
from pandas.core.groupby import DataFrameGroupBy
from numpy import ndarray, dtype

# Plotting                             
from matplotlib.figure import Figure

# Custom Views
from custom_views.DataFrame_View import (
    DataFrame_TableView, DataFrame_FigureModel, DataFrame_FigureView
    )
from custom_views.DataFrameGroupBy_View import(
    DataFrameGroupBy_TableView, DataFrameGroupBy_FigureModel, 
    DataFrameGroupBy_FigureView
    )
from custom_views.Series_View import (
    Series_TableView, Series_FigureModel, Series_FigureView
    )
from custom_views.list_View import list_TableView



# Matplotlib templates
# --------------------

template OutputTemplate(model_type: Figure):

    Container:
        MPLCanvas:
            figure = output_model


# Pandas templates
# ----------------

template OutputTemplate(model_type: DataFrame):

    DataFrame_FigureView:
        model = DataFrame_FigureModel(output_model)
    DataFrame_TableView:
        model = output_model

template OutputTemplate(model_type: DataFrameGroupBy):
    
    DataFrameGroupBy_FigureView:
        model = DataFrameGroupBy_FigureModel(output_model)

    DataFrameGroupBy_TableView:
        model = output_model

template OutputTemplate(model_type: Index): 

    Index_TableView:
        model = output_model

template OutputTemplate(model_type: Series): 

    Series_FigureView:
        model = Series_FigureModel(output_model)
    Series_TableView:
        model = output_model



# Numpy templates
# ---------------

template OutputTemplate(model_type: ndarray):
    
    Conditional:
        condition = output_model.ndim == 1
        list_TableView:
            model = list(output_model)

    Conditional:
        condition = output_model.ndim > 1
        MultilineField:
            read_only = True
            text = str(output_model)

template OutputTemplate(model_type: dtype):
    
    Field:
        read_only = True
        text = str(output_model)


# Primitives templates
# --------------------     

template OutputTemplate(model_type: dict):

    OutputsGroupBox:
        output_model = parent.output_model
    
template OutputTemplate(model_type: float): 

    Field:
        read_only = True
        text = str(output_model)

template OutputTemplate(model_type: int): 

    Field:
        read_only = True
        text = str(output_model)

template OutputTemplate(model_type: list):
    
    list_TableView:
        model = output_model

template OutputTemplate(model_type: str): 

    MultilineField:
        read_only = True
        text = str(output_model)

template OutputTemplate(model_type: tuple): 

    Field:
        read_only = True
        text = str(output_model)



enamldef OutputContainer(Container):

    attr output_model
    
    DynamicTemplate:
        base = OutputTemplate
        args = (type(output_model),)

 
enamldef OutputsGroupBox(GroupBox): ogb:
    
    attr output_model
    
    Notebook:
        
        Looper:
            
            iterable << [key for key in output_model.keys()]
            
            Page:
                title = loop_item
                closable = False

                Container:
                    ScrollArea:
                        OutputContainer:
                            output_model = ogb.output_model[loop_item]


class CalculationOutput_UI(Atom):

    calc_outputs = Value({})


class CalculationOutput_Model(object):


    class ui(Atom):
        
        calc_outputs = Value({})


    def __init__(self, calculationGraph):

        self.uiModel = CalculationOutput_UI()
        self.calculationGraph = calculationGraph

  
    def refresh_output(self):

        self.uiModel.calc_outputs = {'foo': 'bar'} # needed to clear output view
        self.calculationGraph.refresh_selected_calc_item_outputs()
        self.uiModel.calc_outputs = \
            self.calculationGraph.uiModel.selected_calc_item_outputs


    def calculate_output(self):
        
        self.uiModel.calc_outputs = {'foo':'bar'} # needed to clear output view
        self.calculationGraph.refresh_selected_calc_item_outputs(
                                                    recalculate = True
                                                    )
        self.uiModel.calc_outputs = \
            self.calculationGraph.uiModel.selected_calc_item_outputs        
    


enamldef CalculationOutput_View(DockPane): me:
    '''
    A view to display the outputs of a Calculation_Model

    Attributes
    ----------
    model (Dict):
        The named outputs of the currently selected Calculation_Model
    '''
    
    attr calc_outputs
    attr recalculate_func

    
    title = 'Calculation Output'
    dock_area = 'right'
    allowed_dock_areas = ['left', 'right']
    closable = False
    

    GroupBox:
        PushButton:    
            text = 'Calculate Output'
            clicked::
                recalculate_func()

        Notebook:   
            Looper:        
                iterable << [key for key in calc_outputs.keys()]        
                Page:            
                    title = loop_item
                    closable = False
                    OutputContainer:
                        output_model = calc_outputs[loop_item]
