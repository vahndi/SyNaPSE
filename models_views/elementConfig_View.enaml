from enaml.core.api import Include
from enaml.widgets.api import DockPane, Form, GroupBox



######################## Bootstrap this #######################################


# CORE
# ----
from flow_elements.core.ReadDataFrame import ReadDataFrame, ReadDataFrame_View
from flow_elements.core.PandasPlot import PandasPlot, PandasPlot_View

# PANDAS
# ------
from flow_elements.pandas_elements.v0_17_1.SelectColumns import (
    SelectColumns_Model, SelectColumns_View)
from flow_elements.pandas_elements.v0_17_1.DataFrameInfo import (
    DataFrameInfo_Model, DataFrameInfo_View)

# SCIKIT-LEARN
# ------------
# Decomposition
from flow_elements.sklearn_elements.v0_17.decomposition.PCA import (
        PCA_Model, PCA_View)

# Classification
from flow_elements.sklearn_elements.v0_17.linear_model.LogisticRegression import (
        LogisticRegression_Model, LogisticRegression_View)
from flow_elements.sklearn_elements.v0_17.linear_model.PassiveAggressiveClassifier import (
        PassiveAggressiveClassifier_Model, PassiveAggressiveClassifier_View)

# Regression
from flow_elements.sklearn_elements.v0_17.linear_model.LinearRegression import (
        LinearRegression_Model, LinearRegression_View)
from flow_elements.sklearn_elements.v0_17.cluster.KMeans import (
        KMeans_Model, KMeans_View)
from flow_elements.sklearn_elements.v0_17.ensemble.RandomForestClassifier import (
        RandomForestClassifier_Model, RandomForestClassifier_View)
from flow_elements.sklearn_elements.v0_17.linear_model.ARDRegression import (
        ARDRegression_Model, ARDRegression_View)
from flow_elements.sklearn_elements.v0_17.linear_model.BayesianRidge import (
        BayesianRidge_Model, BayesianRidge_View)
from flow_elements.sklearn_elements.v0_17.linear_model.ElasticNet import (
        ElasticNet_Model, ElasticNet_View)        
from flow_elements.sklearn_elements.v0_17.linear_model.Lars import (
        Lars_Model, Lars_View)
from flow_elements.sklearn_elements.v0_17.linear_model.Lasso import (
        Lasso_Model, Lasso_View)
from flow_elements.sklearn_elements.v0_17.linear_model.LassoLars import (
        LassoLars_Model, LassoLars_View)
from flow_elements.sklearn_elements.v0_17.linear_model.LassoLarsIC import (
        LassoLarsIC_Model, LassoLarsIC_View)
from flow_elements.sklearn_elements.v0_17.linear_model.PassiveAggressiveRegressor import (
        PassiveAggressiveRegressor_Model, PassiveAggressiveRegressor_View)
from flow_elements.sklearn_elements.v0_17.linear_model.Ridge import (
        Ridge_Model, Ridge_View)
from flow_elements.sklearn_elements.v0_17.linear_model.SGDRegressor import (
        SGDRegressor_Model, SGDRegressor_View)
from flow_elements.sklearn_elements.v0_17.linear_model.TheilSenRegressor import (
        TheilSenRegressor_Model, TheilSenRegressor_View)


elementViewDict = {ReadDataFrame: ReadDataFrame_View,
                   DataFrameInfo_Model: DataFrameInfo_View,
                   SelectColumns_Model: SelectColumns_View,
                   PandasPlot: PandasPlot_View,
                   ARDRegression_Model: ARDRegression_View,
                   BayesianRidge_Model: BayesianRidge_View,
                   ElasticNet_Model: ElasticNet_View,
                   KMeans_Model: KMeans_View,
                   Lars_Model: Lars_View,
                   Lasso_Model: Lasso_View,
                   LassoLars_Model: LassoLars_View,
                   LassoLarsIC_Model: LassoLarsIC_View,
                   LinearRegression_Model: LinearRegression_View,
                   LogisticRegression_Model: LogisticRegression_View,
                   PassiveAggressiveClassifier_Model: PassiveAggressiveClassifier_View,
                   PassiveAggressiveRegressor_Model: PassiveAggressiveRegressor_View,
                   Ridge_Model: Ridge_View,
                   SGDRegressor_Model: SGDRegressor_View,
                   TheilSenRegressor_Model: TheilSenRegressor_View,
                   RandomForestClassifier_Model: RandomForestClassifier_View,
                   PCA_Model: PCA_View}


###############################################################################


def getElementView(elementModel):
    
    try:
        constructor = elementViewDict[type(elementModel.getModel())]
        view = constructor(model = elementModel.getModel().uiModel)
        return view
    except:
        return Form()



enamldef ElementConfig_View(DockPane):

    attr model
    
    title = 'Element Configuration'
    dock_area = 'left'
    allowed_dock_areas = ['left', 'right'] 
    closable = False
    
    GroupBox:
        
        Include:
            
            objects << [getElementView(model)]
