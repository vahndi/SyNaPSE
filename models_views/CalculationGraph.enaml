# Atom
from atom.api import Atom, ContainerList, Dict, Int, Value

# Enaml
from enaml.widgets.api import (Container, DockPane, GroupBox, MPLCanvas,
                               MenuBar, Menu, ActionGroup, Action,
                               PushButton, ScrollArea)
from custom_views.RadioButtonList import RadioButtonList_View
from enaml.layout.api import hbox, vbox
from enaml.core.api import Include

# Models
from calculation import CalculationItem
from ChooseCalculation import ChooseCalculation_View

# Other
import networkx as nx
import matplotlib.pyplot as plt
import matplotlib as mpl
from matplotlib.patches import Arrow, Circle
from functools import partial
from copy import deepcopy



fig = plt.figure(facecolor = 'white')
ax = fig.add_subplot('111', axis_bgcolor = 'white')
fig.tight_layout()



class CalculationGraph_UI(Atom):
    
    calc_items = ContainerList(CalculationItem)
    selected_calc_item = Value(CalculationItem)
    selected_calc_item_outputs = Dict(default = {})
    graph_figure = Value()



class CalculationGraph_Model(object):

    
    def __init__(self, parent, calc_dict, calc_graph = None):
        
        self._parent = parent
        self._calc_dict = calc_dict
        self.uiModel = CalculationGraph_UI(selected_calc_item = None,
                                           graph_figure = plt.figure())
        if not calc_graph:
            self._calc_graph = nx.DiGraph()
        else:
            self._calc_graph = calc_graph

    
    def calc_graph(self):
        
        return self._calc_graph
        
        
    def select_calc_item(self, calc_item, recalculate = False):
        '''
        Select a specific calc item from the graph
        '''
        print 'select_calc_item'
        # Clear the ui model selected item and outputs
        self.uiModel.selected_calc_item = None
        self.uiModel.selected_calc_item_outputs = {}
        
        # Assign the item and its outputs to the ui model
        self.uiModel.selected_calc_item = calc_item
        self.uiModel.selected_calc_item_outputs = (
                                                calc_item.calculate_outputs()
                                                if recalculate
                                                else calc_item.get_outputs()
                                                )

        
        # Update the appendable calc item types
        self._parent.update_choosable_calc_types(type(calc_item.model()))


    def refresh_selected_calc_item_outputs(self, recalculate = False):

        calc_item = self.uiModel.selected_calc_item
        if calc_item is not None:
            self.select_calc_item(calc_item, recalculate = recalculate)
        else:
            self.uiModel.selected_calc_item_outputs = {
                                                'Output':
                                                'No Calculation Selected'
                                                }
            # Update the appendable calc item types
            self._parent.update_choosable_calc_types(None)
    
    
    def item_names(self):
        
        return [node.item_name for node in self._calc_graph.nodes()]


    def draw_graph_figure(self):
        
        # variables and shorthands
        selected_node = self.uiModel.selected_calc_item
        graph = self._calc_graph
        nodes = graph.nodes()
        edges = graph.edges()
        node_radius = 10.0
        
        # Drawing properties (need to use `item_name`s as keys to prevent calcs
        #                     of the same type from being displayed at the same
        #                     location - perhaps an issue with length of name?)
        coord_graph = nx.DiGraph()
        for node in graph.nodes():
            coord_graph.add_node(node.item_name)
        for edge in graph.edges():
            coord_graph.add_edge(edge[0].item_name, edge[1].item_name)
        node_coords = nx.graphviz_layout(coord_graph, prog = 'dot')
        node_x = [node_coords[node][0] for node in coord_graph.nodes()]
        node_y = [node_coords[node][1] for node in coord_graph.nodes()]
        node_labels = [node.replace(' ', '\n') 
                       for node in coord_graph.nodes()]
        
        # Clear axes
        ax.clear()

        # Draw Edges
        for edge in edges:
            # calculate start and end coordinates
            xy_0 = node_coords[edge[0].item_name]
            xy_1 = node_coords[edge[1].item_name]
            node_dist = ((xy_0[0] - xy_1[0]) ** 2 +
                         (xy_0[1] - xy_1[1]) ** 2) ** 0.5
            x0 = xy_0[0] + (node_radius / node_dist) * (xy_1[0] - xy_0[0])
            y0 = xy_0[1] + (node_radius / node_dist) * (xy_1[1] - xy_0[1])
            x1 = xy_1[0] - (node_radius / node_dist) * (xy_1[0] - xy_0[0])
            y1 = xy_1[1] - (node_radius / node_dist) * (xy_1[1] - xy_0[1])
            # make and draw arrow
            arrow = Arrow(x = x0, y = y0, 
                          dx = x1 - x0, dy = y1 - y0, 
                          color = 'blue')
            ax.add_artist(arrow)
            
        # Draw nodes
        self.circles_nodes = {}
        for node in nodes:
            circle = Circle(xy = node_coords[node.item_name], 
                                 radius = node_radius, 
                                 color = ('green' if node is selected_node
                                          else 'red'),
                                 alpha = 0.5,
                                 picker = True)
            self.circles_nodes[circle] = node
            ax.add_artist(circle)

        # Axes
        ax.set_xticks([])
        ax.set_yticks([])
        ax.set_axis_bgcolor('white')
        if len(nodes) > 0:
            min_x = min(node_x) - 2 * node_radius
            max_x = max(node_x) + 2 * node_radius
            min_y = min(node_y) - 2 * node_radius
            max_y = max(node_y) + 2 * node_radius
            width = max_x - min_x
            height = max_y - min_y
            max_dim = max(width, height)
            x_center = (min_x + max_x) / 2
            y_center = (min_y + max_y) / 2
            ax.set_xlim([x_center - max_dim / 2, 
                         x_center + max_dim / 2])
            ax.set_ylim([y_center - max_dim / 2, 
                         y_center + max_dim / 2])
        
        # Annotate nodes
        for x, y, label in zip(node_x, node_y, node_labels):
            ax.annotate(s = label, xy = (x, y), 
                        ha = 'center', va = 'center', 
                        multialignment = 'center')
        
        # Attach event handler
        fig.canvas.mpl_connect('pick_event', self.plot_item_picked)
        fig.canvas.draw()
        self.uiModel.graph_figure = fig
        

    def plot_item_picked(self, event):
        
        if isinstance(event.artist, Circle):
            
            key = event.mouseevent.key
            
            if key is None:
                
                # Clear selected nodes and select this one
                selected_node = self.circles_nodes[event.artist]
                self.uiModel.selected_calc_item = selected_node
                self._parent.calcOutput_Model.refresh_output()
                self.draw_graph_figure()

            elif key == 'shift':
                
                # Add this node to the currently selected ones
                pass
            
        elif isinstance(event.artist, Arrow):
            
            print 'Arrow Picked'


    def relayout_nodes(self):
        
        layout = nx.graphviz_layout(self._calc_graph, prog = 'dot')
        for item, coord in layout.items():
            item.x = int(coord[0])
            item.y = int(coord[1])
        self.uiModel.calc_items = [item for item in self._calc_graph.nodes()]


    def add_calc_item(self, calc_type):
        
        # Get coords of selected item
        new_x = 0
        new_y = 0
        selected_item = self.uiModel.selected_calc_item
        if selected_item is not None:
            new_x = selected_item.x
            new_y = selected_item.y + 20

        # Create new item            
#        constructor = self._calc_dict[calc_type_name]
        new_item = CalculationItem(model = calc_type(),
                                   container = self,
                                   x = new_x, y = new_y)

        # Rename if the item name already exists
        while new_item.item_name in self.item_names():
            new_item.item_name += '_'

        # Add new node to the graph
        self._calc_graph.add_node(new_item)

        # Link outputs of selected item to new item
        if selected_item is not None: 
            try:
                # Map outputs of previous calc to inputs of this calc
                input_arg_names = new_item.model_arg_names()
                prev_outputs = selected_item.get_outputs()
                input_args_dict = {a: prev_outputs[a] 
                                   for a in input_arg_names
                                   if a in prev_outputs}
                new_item.set_inputs(input_args_dict)
                # Add an edge with the output to input mapping
                self._calc_graph.add_edge(selected_item, new_item,
                                          {a: a
                                           for a in input_arg_names
                                           if a in prev_outputs})
                # Update uiModel calc items and redraw graph
                self.uiModel.calc_items = [item for item in 
                                           self._calc_graph.nodes()]
                self.uiModel.selected_calc_item = new_item
                self._parent.calcOutput_Model.calculate_output()
                self.draw_graph_figure()
            except Exception as e:
                self._calc_graph.remove_node(new_item)
                print 'Error mapping outputs of selected calc to new calc'
                print '__class__:', str(e.__class__)
                print '__doc__:', e.__doc__
                print 'message:', e.message
                print 'args:', str(e.args)                
                return
        else:
            # Update uiModel calc items and redraw graph
            self.uiModel.calc_items = [item for item in 
                                       self._calc_graph.nodes()]
            self.uiModel.selected_calc_item = new_item
            self._parent.calcOutput_Model.calculate_output()
            self.draw_graph_figure()


    def delete_selected_item(self):
        
        selected_node = self.uiModel.selected_calc_item
        graph = self._calc_graph
        
        # If node has no successors
        if graph.out_degree(selected_node) == 0:
            if graph.in_degree(selected_node) == 0:
                # node has no predecessors
                self.uiModel.selected_calc_item = None
                self.uiModel.selected_calc_item_outputs = {}
                graph.remove_node(selected_node)
                self.uiModel.calc_items = [item for item in graph.nodes()]
                self.draw_graph_figure()
                self._parent.calcOutput_Model.refresh_output()
            else:
                # node has >=1 predecessor - select the first one
                previous_node = graph.predecessors(selected_node)[0]
                graph.remove_node(selected_node)
                self.uiModel.calc_items = [item for item in graph.nodes()]
                self.select_calc_item(previous_node)
                self.draw_graph_figure()
                self._parent.calcOutput_Model.refresh_output()


    def clear_selection(self):
        
        self.uiModel.selected_calc_item = None
        self.draw_graph_figure()
        self._parent.calcOutput_Model.refresh_output()



enamldef CalculationGraph_View(DockPane): me:


    attr model

    
    title = 'Calculation Graph'
    dock_area = 'left'
    allowed_dock_areas = ['left', 'right'] 
    closable = False
    
    Container: main_cntnr:
        
        constraints = [vbox(button_cntnr, calcs_cntnr)]

        Container: button_cntnr:
            constraints = [hbox(btn_delete, btn_clear_selection)]

            PushButton: btn_delete:
                text = 'Delete Calculation'
                enabled << me.model.uiModel.selected_calc_item is not None
                clicked ::
                    me.model.delete_selected_item()
                    main_cntnr.request_relayout()
            PushButton: btn_clear_selection:
                text = 'Clear Selection'
                enabled << me.model.uiModel.selected_calc_item is not None
                clicked ::
                    me.model.clear_selection()

        MPLCanvas: calcs_cntnr:
            
            figure << model.uiModel.graph_figure
            maximum_size << (800, 800) if floating else (400, 400)

