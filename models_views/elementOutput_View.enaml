# Enaml
from enaml.core.api import Conditional, DynamicTemplate, Looper
from enaml.widgets.api import (
    Container, DockPane, Field, GroupBox, Html, Notebook, MPLCanvas, 
    MultilineField, Page, PushButton, ScrollArea
    )

# Plotting                             
from matplotlib.figure import Figure

# Numerical
import pandas as pd
from pandas import DataFrame, Series
from numpy import ndarray
from sklearn.metrics import confusion_matrix

# Custom Views
from custom_views.DataFrame_View import (
    DataFrame_TableView, DataFrame_FigureModel, DataFrame_FigureView
    )
from custom_views.Series_View import (
    Series_TableView, Series_FigureModel, Series_FigureView
    )
from custom_views.list_View import list_TableView



template OutputTemplate(model_type: Figure):

    Container:
        MPLCanvas:
            figure = output_model


template OutputTemplate(model_type: DataFrame):

    DataFrame_FigureView:
        model = DataFrame_FigureModel(output_model)
    
    DataFrame_TableView:
        model = output_model


template OutputTemplate(model_type: Series): 

    Series_FigureView:
        model = Series_FigureModel(output_model)

    Series_TableView:
        model = output_model


template OutputTemplate(model_type: list):
    
    list_TableView:
        model = output_model


template OutputTemplate(model_type: ndarray):
    
    Conditional:
        condition = output_model.ndim == 1
        list_TableView:
            model = list(output_model)

    Conditional:
        condition = output_model.ndim > 1
        MultilineField:
            read_only = True
            text = str(output_model)


template OutputTemplate(model_type: str): 

    MultilineField:
        read_only = True
        text = str(output_model)
    

template OutputTemplate(model_type: float): 

    Field:
        read_only = True
        text = str(output_model)


template OutputTemplate(model_type: int): 

    Field:
        read_only = True
        text = str(output_model)


template OutputTemplate(model_type: tuple): 

    Field:
        read_only = True
        text = str(output_model)
        

template OutputTemplate(model_type: dict):

    OutputsGroupBox:
        
        output_model = parent.output_model


enamldef OutputContainer(Container):

    attr output_model
    
    DynamicTemplate:
        base = OutputTemplate
        args = (type(output_model),)

 
 
enamldef OutputsGroupBox(GroupBox): ogb:
    
    attr output_model
    
    Notebook:
        
        Looper:
            
            iterable << [key for key in output_model.keys()]
            
            Page:
                title = loop_item
                closable = False

                Container:
                    ScrollArea:
                        OutputContainer:
                            output_model = ogb.output_model[loop_item]



enamldef ElementOutput_View(DockPane):
    '''
    A view to display the outputs of a FlowElement

    Attributes
    ----------
    model (Dict):
        The named outputs of the currently selected FlowElement
    '''
    
    attr model
    attr flowList

    
    title = 'Element Output'
    dock_area = 'right'
    allowed_dock_areas = ['left', 'right']
    closable = False


    GroupBox:
        
        PushButton:
            
            text = 'Refresh Output'
            clicked::
                flowList.refreshSelectedElementOutputs()
                model = flowList.uiModel.selectedElementOutputs
                
        Notebook:
            
            Looper:
                
                iterable << [key for key in model.keys()]
                
                Page:
                    
                    title = loop_item
                    closable = False
                    OutputContainer:
                        output_model = model[loop_item]
